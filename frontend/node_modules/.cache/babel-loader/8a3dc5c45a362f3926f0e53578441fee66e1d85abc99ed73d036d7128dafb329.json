{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./SuperAdminDashboard.css\";\n\n// const SuperAdminDashboard = () => {\n//     const [departments, setDepartments] = useState([]);\n//     const [professors, setProfessors] = useState([]);\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n//     const [newDeptName, setNewDeptName] = useState(\"\");\n//     const [newDeptId, setNewDeptId] = useState(\"\");\n//     const [newHodName, setNewHodName] = useState(\"\");\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\n//     const [faculties, setFaculties] = useState([]); // ‚úÖ Store faculty list\n// const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // ‚úÖ Store selected faculty\n\n//     useEffect(() => {\n//         fetchDepartments();\n//     }, []);\n\n//     const fetchDepartments = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setDepartments(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching departments:\", error);\n//         }\n//     };\n\n//     const fetchFaculties = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setFaculties(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching faculties:\", error);\n//         }\n//     };\n\n//     fetchFaculties();\n\n//     const fetchProfessors = async (deptId) => {\n//         if (!deptId) return;\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setProfessors(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching professors:\", error);\n//         }\n//     };\n\n//     const handleAssignHOD = async () => {\n//         if (!selectedDepartment || !selectedProfessor) {\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\n//                 dept_id: selectedDepartment,\n//                 user_id: selectedProfessor,\n//             }, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ HOD assigned successfully!\");\n//             setSelectedProfessor(\"\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error assigning HOD:\", error);\n//             alert(\"‚ùå Failed to assign HOD.\");\n//         }\n//     };\n\n//     const handleCreateDepartment = async () => {\n//         if (!newDeptName || !newDeptId || !selectedFaculty || !newHodName || !newHodEmail || !newHodPassword) {\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\n//                 dept_id: newDeptId,\n//                 dept_name: newDeptName,\n//                 faculty_id: selectedFaculty, // üîπ Include faculty_id\n//                 hod_name: newHodName,\n//                 hod_email: newHodEmail,\n//                 hod_password: newHodPassword,\n//             }, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\n//             setNewDeptName(\"\");\n//             setNewDeptId(\"\");\n//             setSelectedFaculty(\"\");\n//             setNewHodName(\"\");\n//             setNewHodEmail(\"\");\n//             setNewHodPassword(\"\");\n//             fetchDepartments();\n//         } catch (error) {\n//             console.error(\"‚ùå Error creating department:\", error);\n//             alert(\"‚ùå Failed to create department.\");\n//         }\n//     };\n\n//     const handleDeleteHOD = async () => {\n//         if (!selectedDepartment) {\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ HOD deleted successfully!\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error deleting HOD:\", error);\n//             alert(\"‚ùå Failed to delete HOD.\");\n//         }\n//     };\n\n//     return (\n//         <div className=\"super-admin-dashboard\">\n//             <h2>Super Admin Dashboard</h2>\n\n//             {/* Assign HOD Section */}\n//             <div className=\"assign-hod-section\">\n//                 <h3>Assign HOD</h3>\n//                 <select onChange={(e) => {\n//                     setSelectedDepartment(e.target.value);\n//                     fetchProfessors(e.target.value);\n//                 }}>\n//                     <option value=\"\">Select Department</option>\n//                     {departments.map((dept) => (\n//                         <option key={dept.dept_id} value={dept.dept_id}>\n//                             {dept.dept_name}\n//                         </option>\n//                     ))}\n//                 </select>\n\n//                 <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\n//                     <option value=\"\">Select Professor</option>\n//                     {professors.map((prof) => (\n//                         <option key={prof.user_id} value={prof.user_id}>\n//                             {prof.user_name} - {prof.user_email}\n//                         </option>\n//                     ))}\n//                 </select>\n\n//                 <button onClick={handleAssignHOD}>Assign HOD</button>\n//                 <button onClick={handleDeleteHOD}>Delete HOD</button>\n//             </div>\n\n//             {/* Create Department Section */}\n//             <div className=\"create-department-section\">\n//                 <h3>Create New Department</h3>\n//                 <select value={selectedFaculty} onChange={(e) => setSelectedFaculty(e.target.value)} required>\n//     <option value=\"\">Select Faculty</option>\n//     {faculties.map((faculty) => (\n//         <option key={faculty.faculty_id} value={faculty.faculty_id}>\n//             {faculty.f_name}\n//         </option>\n//     ))}\n// </select>\n//                 <input type=\"text\" placeholder=\"Department ID\" value={newDeptId} onChange={(e) => setNewDeptId(e.target.value)} />\n//                 <input type=\"text\" placeholder=\"Department Name\" value={newDeptName} onChange={(e) => setNewDeptName(e.target.value)} />\n//                 <h4>Assign New HOD</h4>\n//                 <input type=\"text\" placeholder=\"HOD Name\" value={newHodName} onChange={(e) => setNewHodName(e.target.value)} />\n//                 <input type=\"email\" placeholder=\"HOD Email\" value={newHodEmail} onChange={(e) => setNewHodEmail(e.target.value)} />\n//                 <input type=\"password\" placeholder=\"HOD Password\" value={newHodPassword} onChange={(e) => setNewHodPassword(e.target.value)} />\n\n//                 <button onClick={handleCreateDepartment}>Create Department & Assign HOD</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SuperAdminDashboard;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// const SuperAdminDashboard = () => {\n//     const [departments, setDepartments] = useState([]);\n//     const [professors, setProfessors] = useState([]);\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n//     const [newDeptName, setNewDeptName] = useState(\"\");\n//     const [newDeptId, setNewDeptId] = useState(\"\");\n//     const [newHodName, setNewHodName] = useState(\"\");\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\n//     const [faculties, setFaculties] = useState([]); // Store faculty list\n//     const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // Store selected faculty\n\n//     useEffect(() => {\n//         fetchDepartments();\n//     }, []);\n\n//     const fetchDepartments = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setDepartments(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching departments:\", error);\n//         }\n//     };\n\n//     const fetchFaculties = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setFaculties(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching faculties:\", error);\n//         }\n//     };\n\n//     // Fetch faculties on every render (if desired you can move this into useEffect)\n//     fetchFaculties();\n\n//     const fetchProfessors = async (deptId) => {\n//         if (!deptId) return;\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setProfessors(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching professors:\", error);\n//         }\n//     };\n\n//     const handleAssignHOD = async () => {\n//         if (!selectedDepartment || !selectedProfessor) {\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.put(\n//                 \"http://localhost:8800/api/superadmin/assign-hod\",\n//                 {\n//                     dept_id: selectedDepartment,\n//                     user_id: selectedProfessor,\n//                 },\n//                 {\n//                     headers: { Authorization: `Bearer ${token}` },\n//                 }\n//             );\n//             alert(\"‚úÖ HOD assigned successfully!\");\n//             setSelectedProfessor(\"\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error assigning HOD:\", error);\n//             alert(\"‚ùå Failed to assign HOD.\");\n//         }\n//     };\n\n//     const handleCreateDepartment = async () => {\n//         if (\n//             !newDeptName ||\n//             !newDeptId ||\n//             !selectedFaculty ||\n//             !newHodName ||\n//             !newHodEmail ||\n//             !newHodPassword\n//         ) {\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\n//                 \"http://localhost:8800/api/superadmin/create-department\",\n//                 {\n//                     dept_id: newDeptId,\n//                     dept_name: newDeptName,\n//                     faculty_id: selectedFaculty, // Include faculty_id\n//                     hod_name: newHodName,\n//                     hod_email: newHodEmail,\n//                     hod_password: newHodPassword,\n//                 },\n//                 {\n//                     headers: { Authorization: `Bearer ${token}` },\n//                 }\n//             );\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\n//             setNewDeptName(\"\");\n//             setNewDeptId(\"\");\n//             setSelectedFaculty(\"\");\n//             setNewHodName(\"\");\n//             setNewHodEmail(\"\");\n//             setNewHodPassword(\"\");\n//             fetchDepartments();\n//         } catch (error) {\n//             console.error(\"‚ùå Error creating department:\", error);\n//             alert(\"‚ùå Failed to create department.\");\n//         }\n//     };\n\n//     const handleDeleteHOD = async () => {\n//         if (!selectedDepartment) {\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ HOD deleted successfully!\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error deleting HOD:\", error);\n//             alert(\"‚ùå Failed to delete HOD.\");\n//         }\n//     };\n\n//     return (\n//         <>\n//             {/* Embedded CSS styling */}\n//             <style>{`\n//                 /* Global Styles */\n//                 body {\n//                   margin: 0;\n//                   padding: 0;\n//                   font-family: Arial, sans-serif;\n//                   background-color: #e9ecef;\n//                 }\n\n//                 /* Super Admin Dashboard Container */\n//                 .super-admin-dashboard {\n//                   display: flex;\n//                   flex-direction: column;\n//                   align-items: center;\n//                   width: 100vw;\n//                   min-height: 100vh;\n//                   padding: 20px;\n//                   background-color: #F3F4F6;\n//                   box-sizing: border-box;\n//                   color: #1E293B;\n//                 }\n\n//                 .super-admin-dashboard h2 {\n//                   margin-bottom: 20px;\n//                   font-size: 2rem;\n//                 }\n\n//                 /* Section Styling */\n//                 .assign-hod-section,\n//                 .create-department-section {\n//                   background: #ffffff;\n//                   padding: 20px;\n//                   border-radius: 8px;\n//                   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n//                   margin-bottom: 20px;\n//                   width: 100%;\n//                   max-width: 800px;\n//                 }\n\n//                 .assign-hod-section h3,\n//                 .create-department-section h3 {\n//                   margin-top: 0;\n//                 }\n\n//                 .assign-hod-section select,\n//                 .create-department-section select,\n//                 .create-department-section input {\n//                   width: 100%;\n//                   padding: 10px;\n//                   margin: 8px 0;\n//                   border: 1px solid #ccc;\n//                   border-radius: 5px;\n//                   box-sizing: border-box;\n//                 }\n\n//                 /* Button Styling */\n//                 button {\n//                   background-color: #007bff;\n//                   color: white;\n//                   padding: 10px 16px;\n//                   border: none;\n//                   border-radius: 5px;\n//                   cursor: pointer;\n//                   font-size: 14px;\n//                   transition: background-color 0.3s;\n//                   margin-right: 10px;\n//                 }\n//                 button:hover {\n//                   background-color: #0056b3;\n//                 }\n\n//                 /* Special button for Delete HOD (if needed) */\n//                 .delete-hod-button {\n//                   background-color: #dc3545;\n//                 }\n//                 .delete-hod-button:hover {\n//                   background-color: #a71d2a;\n//                 }\n\n//                 /* Responsive adjustments */\n//                 @media (max-width: 768px) {\n//                   .super-admin-dashboard {\n//                     padding: 10px;\n//                   }\n//                   .assign-hod-section,\n//                   .create-department-section {\n//                     width: 100%;\n//                   }\n//                 }\n//             `}</style>\n\n//             <div className=\"super-admin-dashboard\">\n//                 <h2>Super Admin Dashboard</h2>\n\n//                 {/* Assign HOD Section */}\n//                 <div className=\"assign-hod-section\">\n//                     <h3>Assign HOD</h3>\n//                     <select\n//                         onChange={(e) => {\n//                             setSelectedDepartment(e.target.value);\n//                             fetchProfessors(e.target.value);\n//                         }}\n//                     >\n//                         <option value=\"\">Select Department</option>\n//                         {departments.map((dept) => (\n//                             <option key={dept.dept_id} value={dept.dept_id}>\n//                                 {dept.dept_name}\n//                             </option>\n//                         ))}\n//                     </select>\n\n//                     <select\n//                         value={selectedProfessor}\n//                         onChange={(e) => setSelectedProfessor(e.target.value)}\n//                     >\n//                         <option value=\"\">Select Professor</option>\n//                         {professors.map((prof) => (\n//                             <option key={prof.user_id} value={prof.user_id}>\n//                                 {prof.user_name} - {prof.user_email}\n//                             </option>\n//                         ))}\n//                     </select>\n\n//                     <button onClick={handleAssignHOD}>Assign HOD</button>\n//                     <button onClick={handleDeleteHOD} className=\"delete-hod-button\">\n//                         Delete HOD\n//                     </button>\n//                 </div>\n\n//                 {/* Create Department Section */}\n//                 <div className=\"create-department-section\">\n//                     <h3>Create New Department</h3>\n//                     <select\n//                         value={selectedFaculty}\n//                         onChange={(e) => setSelectedFaculty(e.target.value)}\n//                         required\n//                     >\n//                         <option value=\"\">Select Faculty</option>\n//                         {faculties.map((faculty) => (\n//                             <option key={faculty.faculty_id} value={faculty.faculty_id}>\n//                                 {faculty.f_name}\n//                             </option>\n//                         ))}\n//                     </select>\n//                     <input\n//                         type=\"text\"\n//                         placeholder=\"Department ID\"\n//                         value={newDeptId}\n//                         onChange={(e) => setNewDeptId(e.target.value)}\n//                     />\n//                     <input\n//                         type=\"text\"\n//                         placeholder=\"Department Name\"\n//                         value={newDeptName}\n//                         onChange={(e) => setNewDeptName(e.target.value)}\n//                     />\n//                     <h4>Assign New HOD</h4>\n//                     <input\n//                         type=\"text\"\n//                         placeholder=\"HOD Name\"\n//                         value={newHodName}\n//                         onChange={(e) => setNewHodName(e.target.value)}\n//                     />\n//                     <input\n//                         type=\"email\"\n//                         placeholder=\"HOD Email\"\n//                         value={newHodEmail}\n//                         onChange={(e) => setNewHodEmail(e.target.value)}\n//                     />\n//                     <input\n//                         type=\"password\"\n//                         placeholder=\"HOD Password\"\n//                         value={newHodPassword}\n//                         onChange={(e) => setNewHodPassword(e.target.value)}\n//                     />\n\n//                     <button onClick={handleCreateDepartment}>\n//                         Create Department & Assign HOD\n//                     </button>\n//                 </div>\n//             </div>\n//         </>\n//     );\n// };\n\n// export default SuperAdminDashboard;","map":{"version":3,"names":[],"sources":["C:/Users/om/Desktop/uims - Copy/client/src/pages/SuperAdminDashboard.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./SuperAdminDashboard.css\";\r\n\r\n// const SuperAdminDashboard = () => {\r\n//     const [departments, setDepartments] = useState([]);\r\n//     const [professors, setProfessors] = useState([]);\r\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n//     const [newDeptName, setNewDeptName] = useState(\"\");\r\n//     const [newDeptId, setNewDeptId] = useState(\"\");\r\n//     const [newHodName, setNewHodName] = useState(\"\");\r\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\r\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\r\n//     const [faculties, setFaculties] = useState([]); // ‚úÖ Store faculty list\r\n// const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // ‚úÖ Store selected faculty\r\n\r\n//     useEffect(() => {\r\n//         fetchDepartments();\r\n//     }, []);\r\n\r\n//     const fetchDepartments = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setDepartments(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching departments:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const fetchFaculties = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setFaculties(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching faculties:\", error);\r\n//         }\r\n//     };\r\n\r\n//     fetchFaculties();\r\n\r\n//     const fetchProfessors = async (deptId) => {\r\n//         if (!deptId) return;\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setProfessors(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching professors:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAssignHOD = async () => {\r\n//         if (!selectedDepartment || !selectedProfessor) {\r\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\r\n//                 dept_id: selectedDepartment,\r\n//                 user_id: selectedProfessor,\r\n//             }, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ HOD assigned successfully!\");\r\n//             setSelectedProfessor(\"\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error assigning HOD:\", error);\r\n//             alert(\"‚ùå Failed to assign HOD.\");\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const handleCreateDepartment = async () => {\r\n//         if (!newDeptName || !newDeptId || !selectedFaculty || !newHodName || !newHodEmail || !newHodPassword) {\r\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\r\n//                 dept_id: newDeptId,\r\n//                 dept_name: newDeptName,\r\n//                 faculty_id: selectedFaculty, // üîπ Include faculty_id\r\n//                 hod_name: newHodName,\r\n//                 hod_email: newHodEmail,\r\n//                 hod_password: newHodPassword,\r\n//             }, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\r\n//             setNewDeptName(\"\");\r\n//             setNewDeptId(\"\");\r\n//             setSelectedFaculty(\"\");\r\n//             setNewHodName(\"\");\r\n//             setNewHodEmail(\"\");\r\n//             setNewHodPassword(\"\");\r\n//             fetchDepartments();\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error creating department:\", error);\r\n//             alert(\"‚ùå Failed to create department.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteHOD = async () => {\r\n//         if (!selectedDepartment) {\r\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ HOD deleted successfully!\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error deleting HOD:\", error);\r\n//             alert(\"‚ùå Failed to delete HOD.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"super-admin-dashboard\">\r\n//             <h2>Super Admin Dashboard</h2>\r\n\r\n//             {/* Assign HOD Section */}\r\n//             <div className=\"assign-hod-section\">\r\n//                 <h3>Assign HOD</h3>\r\n//                 <select onChange={(e) => {\r\n//                     setSelectedDepartment(e.target.value);\r\n//                     fetchProfessors(e.target.value);\r\n//                 }}>\r\n//                     <option value=\"\">Select Department</option>\r\n//                     {departments.map((dept) => (\r\n//                         <option key={dept.dept_id} value={dept.dept_id}>\r\n//                             {dept.dept_name}\r\n//                         </option>\r\n//                     ))}\r\n//                 </select>\r\n\r\n//                 <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\r\n//                     <option value=\"\">Select Professor</option>\r\n//                     {professors.map((prof) => (\r\n//                         <option key={prof.user_id} value={prof.user_id}>\r\n//                             {prof.user_name} - {prof.user_email}\r\n//                         </option>\r\n//                     ))}\r\n//                 </select>\r\n\r\n//                 <button onClick={handleAssignHOD}>Assign HOD</button>\r\n//                 <button onClick={handleDeleteHOD}>Delete HOD</button>\r\n//             </div>\r\n\r\n//             {/* Create Department Section */}\r\n//             <div className=\"create-department-section\">\r\n//                 <h3>Create New Department</h3>\r\n//                 <select value={selectedFaculty} onChange={(e) => setSelectedFaculty(e.target.value)} required>\r\n//     <option value=\"\">Select Faculty</option>\r\n//     {faculties.map((faculty) => (\r\n//         <option key={faculty.faculty_id} value={faculty.faculty_id}>\r\n//             {faculty.f_name}\r\n//         </option>\r\n//     ))}\r\n// </select>\r\n//                 <input type=\"text\" placeholder=\"Department ID\" value={newDeptId} onChange={(e) => setNewDeptId(e.target.value)} />\r\n//                 <input type=\"text\" placeholder=\"Department Name\" value={newDeptName} onChange={(e) => setNewDeptName(e.target.value)} />\r\n//                 <h4>Assign New HOD</h4>\r\n//                 <input type=\"text\" placeholder=\"HOD Name\" value={newHodName} onChange={(e) => setNewHodName(e.target.value)} />\r\n//                 <input type=\"email\" placeholder=\"HOD Email\" value={newHodEmail} onChange={(e) => setNewHodEmail(e.target.value)} />\r\n//                 <input type=\"password\" placeholder=\"HOD Password\" value={newHodPassword} onChange={(e) => setNewHodPassword(e.target.value)} />\r\n\r\n//                 <button onClick={handleCreateDepartment}>Create Department & Assign HOD</button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default SuperAdminDashboard;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const SuperAdminDashboard = () => {\r\n//     const [departments, setDepartments] = useState([]);\r\n//     const [professors, setProfessors] = useState([]);\r\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n//     const [newDeptName, setNewDeptName] = useState(\"\");\r\n//     const [newDeptId, setNewDeptId] = useState(\"\");\r\n//     const [newHodName, setNewHodName] = useState(\"\");\r\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\r\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\r\n//     const [faculties, setFaculties] = useState([]); // Store faculty list\r\n//     const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // Store selected faculty\r\n\r\n//     useEffect(() => {\r\n//         fetchDepartments();\r\n//     }, []);\r\n\r\n//     const fetchDepartments = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setDepartments(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching departments:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const fetchFaculties = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setFaculties(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching faculties:\", error);\r\n//         }\r\n//     };\r\n\r\n//     // Fetch faculties on every render (if desired you can move this into useEffect)\r\n//     fetchFaculties();\r\n\r\n//     const fetchProfessors = async (deptId) => {\r\n//         if (!deptId) return;\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setProfessors(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching professors:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAssignHOD = async () => {\r\n//         if (!selectedDepartment || !selectedProfessor) {\r\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.put(\r\n//                 \"http://localhost:8800/api/superadmin/assign-hod\",\r\n//                 {\r\n//                     dept_id: selectedDepartment,\r\n//                     user_id: selectedProfessor,\r\n//                 },\r\n//                 {\r\n//                     headers: { Authorization: `Bearer ${token}` },\r\n//                 }\r\n//             );\r\n//             alert(\"‚úÖ HOD assigned successfully!\");\r\n//             setSelectedProfessor(\"\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error assigning HOD:\", error);\r\n//             alert(\"‚ùå Failed to assign HOD.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleCreateDepartment = async () => {\r\n//         if (\r\n//             !newDeptName ||\r\n//             !newDeptId ||\r\n//             !selectedFaculty ||\r\n//             !newHodName ||\r\n//             !newHodEmail ||\r\n//             !newHodPassword\r\n//         ) {\r\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.post(\r\n//                 \"http://localhost:8800/api/superadmin/create-department\",\r\n//                 {\r\n//                     dept_id: newDeptId,\r\n//                     dept_name: newDeptName,\r\n//                     faculty_id: selectedFaculty, // Include faculty_id\r\n//                     hod_name: newHodName,\r\n//                     hod_email: newHodEmail,\r\n//                     hod_password: newHodPassword,\r\n//                 },\r\n//                 {\r\n//                     headers: { Authorization: `Bearer ${token}` },\r\n//                 }\r\n//             );\r\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\r\n//             setNewDeptName(\"\");\r\n//             setNewDeptId(\"\");\r\n//             setSelectedFaculty(\"\");\r\n//             setNewHodName(\"\");\r\n//             setNewHodEmail(\"\");\r\n//             setNewHodPassword(\"\");\r\n//             fetchDepartments();\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error creating department:\", error);\r\n//             alert(\"‚ùå Failed to create department.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteHOD = async () => {\r\n//         if (!selectedDepartment) {\r\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ HOD deleted successfully!\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error deleting HOD:\", error);\r\n//             alert(\"‚ùå Failed to delete HOD.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             {/* Embedded CSS styling */}\r\n//             <style>{`\r\n//                 /* Global Styles */\r\n//                 body {\r\n//                   margin: 0;\r\n//                   padding: 0;\r\n//                   font-family: Arial, sans-serif;\r\n//                   background-color: #e9ecef;\r\n//                 }\r\n                \r\n//                 /* Super Admin Dashboard Container */\r\n//                 .super-admin-dashboard {\r\n//                   display: flex;\r\n//                   flex-direction: column;\r\n//                   align-items: center;\r\n//                   width: 100vw;\r\n//                   min-height: 100vh;\r\n//                   padding: 20px;\r\n//                   background-color: #F3F4F6;\r\n//                   box-sizing: border-box;\r\n//                   color: #1E293B;\r\n//                 }\r\n                \r\n//                 .super-admin-dashboard h2 {\r\n//                   margin-bottom: 20px;\r\n//                   font-size: 2rem;\r\n//                 }\r\n                \r\n//                 /* Section Styling */\r\n//                 .assign-hod-section,\r\n//                 .create-department-section {\r\n//                   background: #ffffff;\r\n//                   padding: 20px;\r\n//                   border-radius: 8px;\r\n//                   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n//                   margin-bottom: 20px;\r\n//                   width: 100%;\r\n//                   max-width: 800px;\r\n//                 }\r\n                \r\n//                 .assign-hod-section h3,\r\n//                 .create-department-section h3 {\r\n//                   margin-top: 0;\r\n//                 }\r\n                \r\n//                 .assign-hod-section select,\r\n//                 .create-department-section select,\r\n//                 .create-department-section input {\r\n//                   width: 100%;\r\n//                   padding: 10px;\r\n//                   margin: 8px 0;\r\n//                   border: 1px solid #ccc;\r\n//                   border-radius: 5px;\r\n//                   box-sizing: border-box;\r\n//                 }\r\n                \r\n//                 /* Button Styling */\r\n//                 button {\r\n//                   background-color: #007bff;\r\n//                   color: white;\r\n//                   padding: 10px 16px;\r\n//                   border: none;\r\n//                   border-radius: 5px;\r\n//                   cursor: pointer;\r\n//                   font-size: 14px;\r\n//                   transition: background-color 0.3s;\r\n//                   margin-right: 10px;\r\n//                 }\r\n//                 button:hover {\r\n//                   background-color: #0056b3;\r\n//                 }\r\n                \r\n//                 /* Special button for Delete HOD (if needed) */\r\n//                 .delete-hod-button {\r\n//                   background-color: #dc3545;\r\n//                 }\r\n//                 .delete-hod-button:hover {\r\n//                   background-color: #a71d2a;\r\n//                 }\r\n                \r\n//                 /* Responsive adjustments */\r\n//                 @media (max-width: 768px) {\r\n//                   .super-admin-dashboard {\r\n//                     padding: 10px;\r\n//                   }\r\n//                   .assign-hod-section,\r\n//                   .create-department-section {\r\n//                     width: 100%;\r\n//                   }\r\n//                 }\r\n//             `}</style>\r\n\r\n//             <div className=\"super-admin-dashboard\">\r\n//                 <h2>Super Admin Dashboard</h2>\r\n\r\n//                 {/* Assign HOD Section */}\r\n//                 <div className=\"assign-hod-section\">\r\n//                     <h3>Assign HOD</h3>\r\n//                     <select\r\n//                         onChange={(e) => {\r\n//                             setSelectedDepartment(e.target.value);\r\n//                             fetchProfessors(e.target.value);\r\n//                         }}\r\n//                     >\r\n//                         <option value=\"\">Select Department</option>\r\n//                         {departments.map((dept) => (\r\n//                             <option key={dept.dept_id} value={dept.dept_id}>\r\n//                                 {dept.dept_name}\r\n//                             </option>\r\n//                         ))}\r\n//                     </select>\r\n\r\n//                     <select\r\n//                         value={selectedProfessor}\r\n//                         onChange={(e) => setSelectedProfessor(e.target.value)}\r\n//                     >\r\n//                         <option value=\"\">Select Professor</option>\r\n//                         {professors.map((prof) => (\r\n//                             <option key={prof.user_id} value={prof.user_id}>\r\n//                                 {prof.user_name} - {prof.user_email}\r\n//                             </option>\r\n//                         ))}\r\n//                     </select>\r\n\r\n//                     <button onClick={handleAssignHOD}>Assign HOD</button>\r\n//                     <button onClick={handleDeleteHOD} className=\"delete-hod-button\">\r\n//                         Delete HOD\r\n//                     </button>\r\n//                 </div>\r\n\r\n//                 {/* Create Department Section */}\r\n//                 <div className=\"create-department-section\">\r\n//                     <h3>Create New Department</h3>\r\n//                     <select\r\n//                         value={selectedFaculty}\r\n//                         onChange={(e) => setSelectedFaculty(e.target.value)}\r\n//                         required\r\n//                     >\r\n//                         <option value=\"\">Select Faculty</option>\r\n//                         {faculties.map((faculty) => (\r\n//                             <option key={faculty.faculty_id} value={faculty.faculty_id}>\r\n//                                 {faculty.f_name}\r\n//                             </option>\r\n//                         ))}\r\n//                     </select>\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         placeholder=\"Department ID\"\r\n//                         value={newDeptId}\r\n//                         onChange={(e) => setNewDeptId(e.target.value)}\r\n//                     />\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         placeholder=\"Department Name\"\r\n//                         value={newDeptName}\r\n//                         onChange={(e) => setNewDeptName(e.target.value)}\r\n//                     />\r\n//                     <h4>Assign New HOD</h4>\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         placeholder=\"HOD Name\"\r\n//                         value={newHodName}\r\n//                         onChange={(e) => setNewHodName(e.target.value)}\r\n//                     />\r\n//                     <input\r\n//                         type=\"email\"\r\n//                         placeholder=\"HOD Email\"\r\n//                         value={newHodEmail}\r\n//                         onChange={(e) => setNewHodEmail(e.target.value)}\r\n//                     />\r\n//                     <input\r\n//                         type=\"password\"\r\n//                         placeholder=\"HOD Password\"\r\n//                         value={newHodPassword}\r\n//                         onChange={(e) => setNewHodPassword(e.target.value)}\r\n//                     />\r\n\r\n//                     <button onClick={handleCreateDepartment}>\r\n//                         Create Department & Assign HOD\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default SuperAdminDashboard;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}