{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\om\\\\Desktop\\\\uims - Copy\\\\client\\\\src\\\\pages\\\\SuperAdminDashboard.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import axios from \"axios\";\n\n// // const SuperAdminDashboard = () => {\n// //     const [professors, setProfessors] = useState([]);\n// //     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n// //     const [message, setMessage] = useState(\"\"); // ‚úÖ Store messages for better feedback\n// //     const [loading, setLoading] = useState(false); // ‚úÖ Loading state for button\n\n// //     useEffect(() => {\n// //         const fetchProfessors = async () => {\n// //             try {\n// //                 const token = localStorage.getItem(\"token\");\n\n// //                 if (!token) {\n// //                     console.error(\"‚ùå No token found! Please log in again.\");\n// //                     alert(\"Session expired. Please log in again.\");\n// //                     return;\n// //                 }\n\n// //                 console.log(\"üîπ Using Token:\", token);\n\n// //                 const response = await axios.get(\"http://localhost:8800/api/professors\", {\n// //                     headers: { Authorization: `Bearer ${token}` } // ‚úÖ Include token\n// //                 });\n\n// //                 console.log(\"‚úÖ Professors fetched:\", response.data);\n// //                 setProfessors(response.data);\n// //             } catch (error) {\n// //                 console.error(\"‚ùå Error fetching professors:\", error.response?.data || error);\n// //                 alert(\"Failed to fetch professors. Check backend logs.\");\n// //             }\n// //         };\n\n// //         fetchProfessors();\n// //     }, []);\n\n// //     const assignHOD = async () => {\n// //         if (!selectedProfessor) {\n// //             setMessage(\"‚ö†Ô∏è Please select a professor to assign as HOD.\");\n// //             return;\n// //         }\n\n// //         setLoading(true);\n\n// //         try {\n// //             const token = localStorage.getItem(\"token\");\n// //             if (!token) throw new Error(\"No token found!\");\n\n// //             const response = await axios.put(\n// //                 \"http://localhost:8800/api/superadmin/assign-hod\",\n// //                 { user_id: selectedProfessor },\n// //                 { headers: { Authorization: `Bearer ${token}` } }\n// //             );\n\n// //             console.log(\"‚úÖ HOD assigned successfully:\", response.data);\n// //             setMessage(\"üéâ HOD assigned successfully!\");\n// //             setSelectedProfessor(\"\");\n// //         } catch (error) {\n// //             console.error(\"‚ùå Error assigning HOD:\", error.response?.data || error);\n// //             setMessage(\"‚ùå Failed to assign HOD.\");\n// //         } finally {\n// //             setLoading(false);\n// //         }\n// //     };\n\n// //     return (\n// //         <div>\n// //             <h2>Super Admin Dashboard</h2>\n// //             <h3>Assign Head of Department (HOD)</h3>\n\n// //             {message && <p style={{ color: \"red\", fontWeight: \"bold\" }}>{message}</p>}\n\n// //             <label>Select a Professor:</label>\n// //             <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\n// //                 <option value=\"\">Select Professor</option>\n// //                 {professors.length > 0 ? (\n// //                     professors.map((prof) => (\n// //                         <option key={prof.user_id} value={prof.user_id}>\n// //                             {prof.user_name} - {prof.user_email}\n// //                         </option>\n// //                     ))\n// //                 ) : (\n// //                     <option disabled>Loading professors...</option>\n// //                 )}\n// //             </select>\n\n// //             <button onClick={assignHOD} disabled={loading || !selectedProfessor}>\n// //                 {loading ? \"Assigning...\" : \"Assign as HOD\"}\n// //             </button>\n// //         </div>\n// //     );\n// // };\n\n// // export default SuperAdminDashboard;\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// const SuperAdminDashboard = () => {\n//     const [professors, setProfessors] = useState([]);\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n//     const [message, setMessage] = useState(\"\"); \n//     const [loading, setLoading] = useState(false);\n\n//     useEffect(() => {\n//         const fetchProfessors = async () => {\n//             try {\n//                 const token = localStorage.getItem(\"token\");\n//                 if (!token) throw new Error(\"No token found! Please log in again.\");\n\n//                 const response = await axios.get(\"http://localhost:8800/api/professors\", {\n//                     headers: { Authorization: `Bearer ${token}` }\n//                 });\n\n//                 setProfessors(response.data);\n//             } catch (error) {\n//                 console.error(\"‚ùå Error fetching professors:\", error.response?.data || error);\n//                 alert(\"Failed to fetch professors. Please check your login or backend.\");\n//             }\n//         };\n\n//         fetchProfessors();\n//     }, []);\n\n//     return (\n//         <div>\n//             <h2>Super Admin Dashboard</h2>\n//             <h3>Assign Head of Department (HOD)</h3>\n\n//             {message && <p style={{ color: \"red\", fontWeight: \"bold\" }}>{message}</p>}\n\n//             <label>Select a Professor:</label>\n//             <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\n//                 <option value=\"\">Select Professor</option>\n//                 {professors.map(prof => (\n//                     <option key={prof.user_id} value={prof.user_id}>\n//                         {prof.user_name} - {prof.user_email}\n//                     </option>\n//                 ))}\n//             </select>\n\n//             <button onClick={() => console.log(\"Assign HOD Logic Here\")}>Assign as HOD</button>\n//         </div>\n//     );\n// };\n\n// export default SuperAdminDashboard;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./SuperAdminDashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SuperAdminDashboard = () => {\n  _s();\n  const [departments, setDepartments] = useState([]);\n  const [professors, setProfessors] = useState([]);\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n  const [newDeptName, setNewDeptName] = useState(\"\");\n  const [newDeptId, setNewDeptId] = useState(\"\");\n  const [newHodName, setNewHodName] = useState(\"\");\n  const [newHodEmail, setNewHodEmail] = useState(\"\");\n  const [newHodPassword, setNewHodPassword] = useState(\"\");\n  useEffect(() => {\n    fetchDepartments();\n  }, []);\n  const fetchDepartments = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      axios.get(\"http://localhost:8800/api/departments\", {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      setDepartments(res.data);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching departments:\", error);\n    }\n  };\n  const fetchProfessors = async deptId => {\n    if (!deptId) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setProfessors(res.data);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching professors:\", error);\n    }\n  };\n  const handleAssignHOD = async () => {\n    if (!selectedDepartment || !selectedProfessor) {\n      alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\n        dept_id: selectedDepartment,\n        user_id: selectedProfessor\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ HOD assigned successfully!\");\n      setSelectedProfessor(\"\");\n      fetchProfessors(selectedDepartment);\n    } catch (error) {\n      console.error(\"‚ùå Error assigning HOD:\", error);\n      alert(\"‚ùå Failed to assign HOD.\");\n    }\n  };\n  const handleCreateDepartment = async () => {\n    if (!newDeptName || !newDeptId || !newHodName || !newHodEmail || !newHodPassword) {\n      alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\n        dept_id: newDeptId,\n        dept_name: newDeptName,\n        hod_name: newHodName,\n        hod_email: newHodEmail,\n        hod_password: newHodPassword\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ Department created and HOD assigned successfully!\");\n      setNewDeptName(\"\");\n      setNewDeptId(\"\");\n      setNewHodName(\"\");\n      setNewHodEmail(\"\");\n      setNewHodPassword(\"\");\n      fetchDepartments();\n    } catch (error) {\n      console.error(\"‚ùå Error creating department:\", error);\n      alert(\"‚ùå Failed to create department.\");\n    }\n  };\n  const handleDeleteHOD = async () => {\n    if (!selectedDepartment) {\n      alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ HOD deleted successfully!\");\n      fetchProfessors(selectedDepartment);\n    } catch (error) {\n      console.error(\"‚ùå Error deleting HOD:\", error);\n      alert(\"‚ùå Failed to delete HOD.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"super-admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Super Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"assign-hod-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Assign HOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => {\n          setSelectedDepartment(e.target.value);\n          fetchProfessors(e.target.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Department\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this), departments.map(dept => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: dept.dept_id,\n          children: dept.dept_name\n        }, dept.dept_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedProfessor,\n        onChange: e => setSelectedProfessor(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Professor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), professors.map(prof => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: prof.user_id,\n          children: [prof.user_name, \" - \", prof.user_email]\n        }, prof.user_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAssignHOD,\n        children: \"Assign HOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteHOD,\n        children: \"Delete HOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-department-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Create New Department\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Department ID\",\n        value: newDeptId,\n        onChange: e => setNewDeptId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Department Name\",\n        value: newDeptName,\n        onChange: e => setNewDeptName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Assign New HOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"HOD Name\",\n        value: newHodName,\n        onChange: e => setNewHodName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"HOD Email\",\n        value: newHodEmail,\n        onChange: e => setNewHodEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"HOD Password\",\n        value: newHodPassword,\n        onChange: e => setNewHodPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateDepartment,\n        children: \"Create Department & Assign HOD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 9\n  }, this);\n};\n_s(SuperAdminDashboard, \"wdfw7NxbiZQ39Xz30BLmX7oLS0g=\");\n_c = SuperAdminDashboard;\nexport default SuperAdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"SuperAdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","SuperAdminDashboard","_s","departments","setDepartments","professors","setProfessors","selectedDepartment","setSelectedDepartment","selectedProfessor","setSelectedProfessor","newDeptName","setNewDeptName","newDeptId","setNewDeptId","newHodName","setNewHodName","newHodEmail","setNewHodEmail","newHodPassword","setNewHodPassword","fetchDepartments","token","localStorage","getItem","get","headers","Authorization","res","data","error","console","fetchProfessors","deptId","handleAssignHOD","alert","put","dept_id","user_id","handleCreateDepartment","post","dept_name","hod_name","hod_email","hod_password","handleDeleteHOD","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","map","dept","prof","user_name","user_email","onClick","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/om/Desktop/uims - Copy/client/src/pages/SuperAdminDashboard.jsx"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\r\n// // import axios from \"axios\";\r\n\r\n// // const SuperAdminDashboard = () => {\r\n// //     const [professors, setProfessors] = useState([]);\r\n// //     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n// //     const [message, setMessage] = useState(\"\"); // ‚úÖ Store messages for better feedback\r\n// //     const [loading, setLoading] = useState(false); // ‚úÖ Loading state for button\r\n\r\n// //     useEffect(() => {\r\n// //         const fetchProfessors = async () => {\r\n// //             try {\r\n// //                 const token = localStorage.getItem(\"token\");\r\n                \r\n// //                 if (!token) {\r\n// //                     console.error(\"‚ùå No token found! Please log in again.\");\r\n// //                     alert(\"Session expired. Please log in again.\");\r\n// //                     return;\r\n// //                 }\r\n        \r\n// //                 console.log(\"üîπ Using Token:\", token);\r\n        \r\n// //                 const response = await axios.get(\"http://localhost:8800/api/professors\", {\r\n// //                     headers: { Authorization: `Bearer ${token}` } // ‚úÖ Include token\r\n// //                 });\r\n        \r\n// //                 console.log(\"‚úÖ Professors fetched:\", response.data);\r\n// //                 setProfessors(response.data);\r\n// //             } catch (error) {\r\n// //                 console.error(\"‚ùå Error fetching professors:\", error.response?.data || error);\r\n// //                 alert(\"Failed to fetch professors. Check backend logs.\");\r\n// //             }\r\n// //         };\r\n        \r\n\r\n// //         fetchProfessors();\r\n// //     }, []);\r\n\r\n// //     const assignHOD = async () => {\r\n// //         if (!selectedProfessor) {\r\n// //             setMessage(\"‚ö†Ô∏è Please select a professor to assign as HOD.\");\r\n// //             return;\r\n// //         }\r\n\r\n// //         setLoading(true);\r\n\r\n// //         try {\r\n// //             const token = localStorage.getItem(\"token\");\r\n// //             if (!token) throw new Error(\"No token found!\");\r\n\r\n// //             const response = await axios.put(\r\n// //                 \"http://localhost:8800/api/superadmin/assign-hod\",\r\n// //                 { user_id: selectedProfessor },\r\n// //                 { headers: { Authorization: `Bearer ${token}` } }\r\n// //             );\r\n\r\n// //             console.log(\"‚úÖ HOD assigned successfully:\", response.data);\r\n// //             setMessage(\"üéâ HOD assigned successfully!\");\r\n// //             setSelectedProfessor(\"\");\r\n// //         } catch (error) {\r\n// //             console.error(\"‚ùå Error assigning HOD:\", error.response?.data || error);\r\n// //             setMessage(\"‚ùå Failed to assign HOD.\");\r\n// //         } finally {\r\n// //             setLoading(false);\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div>\r\n// //             <h2>Super Admin Dashboard</h2>\r\n// //             <h3>Assign Head of Department (HOD)</h3>\r\n\r\n// //             {message && <p style={{ color: \"red\", fontWeight: \"bold\" }}>{message}</p>}\r\n\r\n// //             <label>Select a Professor:</label>\r\n// //             <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\r\n// //                 <option value=\"\">Select Professor</option>\r\n// //                 {professors.length > 0 ? (\r\n// //                     professors.map((prof) => (\r\n// //                         <option key={prof.user_id} value={prof.user_id}>\r\n// //                             {prof.user_name} - {prof.user_email}\r\n// //                         </option>\r\n// //                     ))\r\n// //                 ) : (\r\n// //                     <option disabled>Loading professors...</option>\r\n// //                 )}\r\n// //             </select>\r\n\r\n// //             <button onClick={assignHOD} disabled={loading || !selectedProfessor}>\r\n// //                 {loading ? \"Assigning...\" : \"Assign as HOD\"}\r\n// //             </button>\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default SuperAdminDashboard;\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const SuperAdminDashboard = () => {\r\n//     const [professors, setProfessors] = useState([]);\r\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n//     const [message, setMessage] = useState(\"\"); \r\n//     const [loading, setLoading] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         const fetchProfessors = async () => {\r\n//             try {\r\n//                 const token = localStorage.getItem(\"token\");\r\n//                 if (!token) throw new Error(\"No token found! Please log in again.\");\r\n                \r\n//                 const response = await axios.get(\"http://localhost:8800/api/professors\", {\r\n//                     headers: { Authorization: `Bearer ${token}` }\r\n//                 });\r\n\r\n//                 setProfessors(response.data);\r\n//             } catch (error) {\r\n//                 console.error(\"‚ùå Error fetching professors:\", error.response?.data || error);\r\n//                 alert(\"Failed to fetch professors. Please check your login or backend.\");\r\n//             }\r\n//         };\r\n\r\n//         fetchProfessors();\r\n//     }, []);\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Super Admin Dashboard</h2>\r\n//             <h3>Assign Head of Department (HOD)</h3>\r\n\r\n//             {message && <p style={{ color: \"red\", fontWeight: \"bold\" }}>{message}</p>}\r\n\r\n//             <label>Select a Professor:</label>\r\n//             <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\r\n//                 <option value=\"\">Select Professor</option>\r\n//                 {professors.map(prof => (\r\n//                     <option key={prof.user_id} value={prof.user_id}>\r\n//                         {prof.user_name} - {prof.user_email}\r\n//                     </option>\r\n//                 ))}\r\n//             </select>\r\n\r\n//             <button onClick={() => console.log(\"Assign HOD Logic Here\")}>Assign as HOD</button>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default SuperAdminDashboard;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./SuperAdminDashboard.css\";\r\n\r\nconst SuperAdminDashboard = () => {\r\n    const [departments, setDepartments] = useState([]);\r\n    const [professors, setProfessors] = useState([]);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n    const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n    const [newDeptName, setNewDeptName] = useState(\"\");\r\n    const [newDeptId, setNewDeptId] = useState(\"\");\r\n    const [newHodName, setNewHodName] = useState(\"\");\r\n    const [newHodEmail, setNewHodEmail] = useState(\"\");\r\n    const [newHodPassword, setNewHodPassword] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetchDepartments();\r\n    }, []);\r\n\r\n    const fetchDepartments = async () => {\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            axios.get(\"http://localhost:8800/api/departments\", {\r\n                headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` }\r\n            \r\n            });\r\n            setDepartments(res.data);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error fetching departments:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchProfessors = async (deptId) => {\r\n        if (!deptId) return;\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setProfessors(res.data);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error fetching professors:\", error);\r\n        }\r\n    };\r\n\r\n    const handleAssignHOD = async () => {\r\n        if (!selectedDepartment || !selectedProfessor) {\r\n            alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\r\n                dept_id: selectedDepartment,\r\n                user_id: selectedProfessor,\r\n            }, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            alert(\"‚úÖ HOD assigned successfully!\");\r\n            setSelectedProfessor(\"\");\r\n            fetchProfessors(selectedDepartment);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error assigning HOD:\", error);\r\n            alert(\"‚ùå Failed to assign HOD.\");\r\n        }\r\n    };\r\n\r\n    const handleCreateDepartment = async () => {\r\n        if (!newDeptName || !newDeptId || !newHodName || !newHodEmail || !newHodPassword) {\r\n            alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\r\n                dept_id: newDeptId,\r\n                dept_name: newDeptName,\r\n                hod_name: newHodName,\r\n                hod_email: newHodEmail,\r\n                hod_password: newHodPassword,\r\n            }, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            alert(\"‚úÖ Department created and HOD assigned successfully!\");\r\n            setNewDeptName(\"\");\r\n            setNewDeptId(\"\");\r\n            setNewHodName(\"\");\r\n            setNewHodEmail(\"\");\r\n            setNewHodPassword(\"\");\r\n            fetchDepartments();\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error creating department:\", error);\r\n            alert(\"‚ùå Failed to create department.\");\r\n        }\r\n    };\r\n\r\n    const handleDeleteHOD = async () => {\r\n        if (!selectedDepartment) {\r\n            alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            alert(\"‚úÖ HOD deleted successfully!\");\r\n            fetchProfessors(selectedDepartment);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error deleting HOD:\", error);\r\n            alert(\"‚ùå Failed to delete HOD.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"super-admin-dashboard\">\r\n            <h2>Super Admin Dashboard</h2>\r\n\r\n            {/* Assign HOD Section */}\r\n            <div className=\"assign-hod-section\">\r\n                <h3>Assign HOD</h3>\r\n                <select onChange={(e) => {\r\n                    setSelectedDepartment(e.target.value);\r\n                    fetchProfessors(e.target.value);\r\n                }}>\r\n                    <option value=\"\">Select Department</option>\r\n                    {departments.map((dept) => (\r\n                        <option key={dept.dept_id} value={dept.dept_id}>\r\n                            {dept.dept_name}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n\r\n                <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\r\n                    <option value=\"\">Select Professor</option>\r\n                    {professors.map((prof) => (\r\n                        <option key={prof.user_id} value={prof.user_id}>\r\n                            {prof.user_name} - {prof.user_email}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n\r\n                <button onClick={handleAssignHOD}>Assign HOD</button>\r\n                <button onClick={handleDeleteHOD}>Delete HOD</button>\r\n            </div>\r\n\r\n            {/* Create Department Section */}\r\n            <div className=\"create-department-section\">\r\n                <h3>Create New Department</h3>\r\n                <input type=\"text\" placeholder=\"Department ID\" value={newDeptId} onChange={(e) => setNewDeptId(e.target.value)} />\r\n                <input type=\"text\" placeholder=\"Department Name\" value={newDeptName} onChange={(e) => setNewDeptName(e.target.value)} />\r\n                <h4>Assign New HOD</h4>\r\n                <input type=\"text\" placeholder=\"HOD Name\" value={newHodName} onChange={(e) => setNewHodName(e.target.value)} />\r\n                <input type=\"email\" placeholder=\"HOD Email\" value={newHodEmail} onChange={(e) => setNewHodEmail(e.target.value)} />\r\n                <input type=\"password\" placeholder=\"HOD Password\" value={newHodPassword} onChange={(e) => setNewHodPassword(e.target.value)} />\r\n\r\n                <button onClick={handleCreateDepartment}>Create Department & Assign HOD</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SuperAdminDashboard;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}