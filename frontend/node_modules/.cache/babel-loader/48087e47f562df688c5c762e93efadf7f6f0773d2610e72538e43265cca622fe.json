{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// const SuperAdminDashboard = () => {\n//     const [professors, setProfessors] = useState([]);\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n//     const [message, setMessage] = useState(\"\"); // ‚úÖ Store messages for better feedback\n//     const [loading, setLoading] = useState(false); // ‚úÖ Loading state for button\n\n//     useEffect(() => {\n//         const fetchProfessors = async () => {\n//             try {\n//                 const token = localStorage.getItem(\"token\");\n\n//                 if (!token) {\n//                     console.error(\"‚ùå No token found! Please log in again.\");\n//                     alert(\"Session expired. Please log in again.\");\n//                     return;\n//                 }\n\n//                 console.log(\"üîπ Using Token:\", token);\n\n//                 const response = await axios.get(\"http://localhost:8800/api/professors\", {\n//                     headers: { Authorization: `Bearer ${token}` } // ‚úÖ Include token\n//                 });\n\n//                 console.log(\"‚úÖ Professors fetched:\", response.data);\n//                 setProfessors(response.data);\n//             } catch (error) {\n//                 console.error(\"‚ùå Error fetching professors:\", error.response?.data || error);\n//                 alert(\"Failed to fetch professors. Check backend logs.\");\n//             }\n//         };\n\n//         fetchProfessors();\n//     }, []);\n\n//     const assignHOD = async () => {\n//         if (!selectedProfessor) {\n//             setMessage(\"‚ö†Ô∏è Please select a professor to assign as HOD.\");\n//             return;\n//         }\n\n//         setLoading(true);\n\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             if (!token) throw new Error(\"No token found!\");\n\n//             const response = await axios.put(\n//                 \"http://localhost:8800/api/superadmin/assign-hod\",\n//                 { user_id: selectedProfessor },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n\n//             console.log(\"‚úÖ HOD assigned successfully:\", response.data);\n//             setMessage(\"üéâ HOD assigned successfully!\");\n//             setSelectedProfessor(\"\");\n//         } catch (error) {\n//             console.error(\"‚ùå Error assigning HOD:\", error.response?.data || error);\n//             setMessage(\"‚ùå Failed to assign HOD.\");\n//         } finally {\n//             setLoading(false);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h2>Super Admin Dashboard</h2>\n//             <h3>Assign Head of Department (HOD)</h3>\n\n//             {message && <p style={{ color: \"red\", fontWeight: \"bold\" }}>{message}</p>}\n\n//             <label>Select a Professor:</label>\n//             <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\n//                 <option value=\"\">Select Professor</option>\n//                 {professors.length > 0 ? (\n//                     professors.map((prof) => (\n//                         <option key={prof.user_id} value={prof.user_id}>\n//                             {prof.user_name} - {prof.user_email}\n//                         </option>\n//                     ))\n//                 ) : (\n//                     <option disabled>Loading professors...</option>\n//                 )}\n//             </select>\n\n//             <button onClick={assignHOD} disabled={loading || !selectedProfessor}>\n//                 {loading ? \"Assigning...\" : \"Assign as HOD\"}\n//             </button>\n//         </div>\n//     );\n// };\n\n// export default SuperAdminDashboard;","map":{"version":3,"names":[],"sources":["C:/Users/om/Desktop/uims - Copy/client/src/pages/SuperAdminDashboard.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const SuperAdminDashboard = () => {\r\n//     const [professors, setProfessors] = useState([]);\r\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n//     const [message, setMessage] = useState(\"\"); // ‚úÖ Store messages for better feedback\r\n//     const [loading, setLoading] = useState(false); // ‚úÖ Loading state for button\r\n\r\n//     useEffect(() => {\r\n//         const fetchProfessors = async () => {\r\n//             try {\r\n//                 const token = localStorage.getItem(\"token\");\r\n                \r\n//                 if (!token) {\r\n//                     console.error(\"‚ùå No token found! Please log in again.\");\r\n//                     alert(\"Session expired. Please log in again.\");\r\n//                     return;\r\n//                 }\r\n        \r\n//                 console.log(\"üîπ Using Token:\", token);\r\n        \r\n//                 const response = await axios.get(\"http://localhost:8800/api/professors\", {\r\n//                     headers: { Authorization: `Bearer ${token}` } // ‚úÖ Include token\r\n//                 });\r\n        \r\n//                 console.log(\"‚úÖ Professors fetched:\", response.data);\r\n//                 setProfessors(response.data);\r\n//             } catch (error) {\r\n//                 console.error(\"‚ùå Error fetching professors:\", error.response?.data || error);\r\n//                 alert(\"Failed to fetch professors. Check backend logs.\");\r\n//             }\r\n//         };\r\n        \r\n\r\n//         fetchProfessors();\r\n//     }, []);\r\n\r\n//     const assignHOD = async () => {\r\n//         if (!selectedProfessor) {\r\n//             setMessage(\"‚ö†Ô∏è Please select a professor to assign as HOD.\");\r\n//             return;\r\n//         }\r\n\r\n//         setLoading(true);\r\n\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             if (!token) throw new Error(\"No token found!\");\r\n\r\n//             const response = await axios.put(\r\n//                 \"http://localhost:8800/api/superadmin/assign-hod\",\r\n//                 { user_id: selectedProfessor },\r\n//                 { headers: { Authorization: `Bearer ${token}` } }\r\n//             );\r\n\r\n//             console.log(\"‚úÖ HOD assigned successfully:\", response.data);\r\n//             setMessage(\"üéâ HOD assigned successfully!\");\r\n//             setSelectedProfessor(\"\");\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error assigning HOD:\", error.response?.data || error);\r\n//             setMessage(\"‚ùå Failed to assign HOD.\");\r\n//         } finally {\r\n//             setLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Super Admin Dashboard</h2>\r\n//             <h3>Assign Head of Department (HOD)</h3>\r\n\r\n//             {message && <p style={{ color: \"red\", fontWeight: \"bold\" }}>{message}</p>}\r\n\r\n//             <label>Select a Professor:</label>\r\n//             <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\r\n//                 <option value=\"\">Select Professor</option>\r\n//                 {professors.length > 0 ? (\r\n//                     professors.map((prof) => (\r\n//                         <option key={prof.user_id} value={prof.user_id}>\r\n//                             {prof.user_name} - {prof.user_email}\r\n//                         </option>\r\n//                     ))\r\n//                 ) : (\r\n//                     <option disabled>Loading professors...</option>\r\n//                 )}\r\n//             </select>\r\n\r\n//             <button onClick={assignHOD} disabled={loading || !selectedProfessor}>\r\n//                 {loading ? \"Assigning...\" : \"Assign as HOD\"}\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default SuperAdminDashboard;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}