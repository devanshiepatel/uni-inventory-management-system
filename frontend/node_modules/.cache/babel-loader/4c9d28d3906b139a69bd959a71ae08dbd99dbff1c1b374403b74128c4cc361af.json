{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\om\\\\Desktop\\\\uims - Copy\\\\client\\\\src\\\\pages\\\\ManageUsers.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useContext } from \"react\";\n// import axios from \"axios\";\n// import \"./ManageUsers.css\";\n// import { AuthContext } from \"../auth/AuthContext\";\n\n// const ManageUsers = () => {\n//     const [users, setUsers] = useState([]);\n//     const [selectedUser, setSelectedUser] = useState(null);\n//     const [username, setUsername] = useState(\"\");\n//     const [email, setEmail] = useState(\"\");\n//     const [role, setRole] = useState(\"\");\n//     const [researchArea, setResearchArea] = useState(\"\"); // For professors\n//     const [password, setPassword] = useState(\"\"); // New password field\n//     const { deptId, userRole, userId } = useContext(AuthContext);\n\n//     useEffect(() => {\n//         fetchUsers();\n//     }, []);\n\n//     // ‚úÖ Fetch Users\n//     const fetchUsers = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             console.log(\"üîç Fetching users... Token:\", token); // Debugging\n\n//             const res = await axios.get(\"http://localhost:8800/api/users\", {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n\n//             const filteredUsers = userRole === \"hod\"\n//                 ? res.data.filter(user => user.dept_id === deptId)\n//                 : res.data;\n\n//             console.log(\"‚úÖ Users fetched successfully:\", res.data);\n//             setUsers(res.data);\n//         } catch (err) {\n//             console.error(\"‚ùå Error fetching users:\", err.response?.data || err);\n//             alert(\"‚ùå Failed to fetch users.\");\n//         }\n//     };\n\n//     // ‚úÖ Handle Adding a New User\n//     const handleAddUser = async (e) => {\n//         e.preventDefault(); // üö® Prevent page refresh\n\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             if (!token) {\n//                 alert(\"‚ùå Unauthorized: Please log in again.\");\n//                 return;\n//             }\n\n//             if (!deptId) {\n//                 alert(\"‚ùå Department information missing. Please re-login.\");\n//                 return;\n//             }\n\n//             const response = await axios.post(\n//                 \"http://localhost:8800/api/register\",\n//                 {\n//                     username,\n//                     email,\n//                     password,\n//                     role,\n//                     dept_id: deptId, // üîπ Use deptId from AuthContext\n//                     research_area: role === \"professor\" ? researchArea : undefined\n//                 },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n\n//             alert(\"‚úÖ User added successfully!\");\n//             console.log(response.data);\n//             fetchUsers(); // Refresh the user list\n//             resetForm();\n//         } catch (error) {\n//             console.error(\"‚ùå Error adding user:\", error.response?.data || error);\n//             alert(error.response?.data?.message || \"‚ùå Failed to add user.\");\n//         }\n//     };\n\n//     // ‚úÖ Handle Updating a User\n//     const handleUpdateUser = async () => {\n//         if (!selectedUser) return;\n\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.put(\n//                 `http://localhost:8800/api/update/${selectedUser}`,\n//                 { username, email, role },\n//                 { headers: { Authorization: `Bearer ${token}` } }\n//             );\n\n//             alert(\"‚úÖ User updated successfully!\");\n//             fetchUsers();\n//             resetForm();\n//         } catch (err) {\n//             console.error(\"‚ùå Error updating user:\", err);\n//             alert(\"‚ùå Failed to update user.\");\n//         }\n//     };\n\n//     // ‚úÖ Handle Deleting a User\n//     const handleDeleteUser = async (user_id) => {\n//         if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.delete(`http://localhost:8800/api/delete/${user_id}`, {\n//                 headers: { Authorization: `Bearer ${token}` }\n//             });\n\n//             alert(\"‚úÖ User deleted successfully!\");\n//             fetchUsers();\n//         } catch (err) {\n//             console.error(\"‚ùå Error deleting user:\", err);\n//             alert(\"‚ùå Failed to delete user.\");\n//         }\n//     };\n\n//     // ‚úÖ Reset Form Fields\n//     const resetForm = () => {\n//         setUsername(\"\");\n//         setEmail(\"\");\n//         setRole(\"\");\n//         setResearchArea(\"\");\n//         setPassword(\"\");\n//         setSelectedUser(null);\n//     };\n\n//     return (\n//         <div className=\"manage-users-container\">\n//             <h2>Manage Users</h2>\n\n//             {/* Add User Form */}\n//             <div className=\"user-form\">\n//                 <h3>Add New User</h3>\n//                 <form onSubmit={handleAddUser}>\n//                     <input type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} required />\n//                     <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n//                     <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n//                     <select value={role} onChange={(e) => setRole(e.target.value)} required>\n//                         <option value=\"\">Select Role</option>\n//                         <option value=\"admin\">Admin</option>\n//                         <option value=\"professor\">Professor</option>\n//                     </select>\n//                     {role === \"professor\" && (\n//                         <input type=\"text\" placeholder=\"Research Area (Optional)\" value={researchArea} onChange={(e) => setResearchArea(e.target.value)} />\n//                     )}\n//                     <button type=\"submit\">Add User</button>\n//                 </form>\n//             </div>\n\n//             {/* User List */}\n//             <h3>Users List</h3>\n//             <table className=\"users-table\">\n//                 <thead>\n//                     <tr>\n//                         <th>Username</th>\n//                         <th>Email</th>\n//                         <th>Role</th>\n//                         <th>Actions</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {users.map((user) => (\n//                         <tr key={user.user_id}>\n//                             <td>{user.user_name}</td>\n//                             <td>{user.user_email}</td>\n//                             <td>{user.role}</td>\n//                             <td>\n//                                 <button onClick={() => { setSelectedUser(user.user_id); setUsername(user.user_name); setEmail(user.user_email); setRole(user.role); }}>‚úèÔ∏è Edit</button>\n//                                 <button onClick={() => handleDeleteUser(user.user_id)}>üóëÔ∏è Delete</button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n\n//             {/* Update User Section */}\n//             {selectedUser && (\n//                 <div className=\"user-form\">\n//                     <h3>Update User</h3>\n//                     <input type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} required />\n//                     <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n//                     <select value={role} onChange={(e) => setRole(e.target.value)} required>\n//                         <option value=\"admin\">Admin</option>\n//                         <option value=\"professor\">Professor</option>\n//                     </select>\n//                     <button onClick={handleUpdateUser}>Update User</button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default ManageUsers;\nimport React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport \"./ManageUsers.css\";\nimport { AuthContext } from \"../auth/AuthContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ManageUsers = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [researchArea, setResearchArea] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const {\n    deptId,\n    userRole,\n    userId\n  } = useContext(AuthContext); // Get user data\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  // ‚úÖ Fetch Users - Only from the same department\n  const fetchUsers = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const res = await axios.get(\"http://localhost:8800/api/users\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // üîπ Filter users from the same department\n      const filteredUsers = res.data.filter(user => user.dept_id === deptId);\n      setUsers(filteredUsers);\n    } catch (err) {\n      var _err$response;\n      console.error(\"‚ùå Error fetching users:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err);\n      alert(\"‚ùå Failed to fetch users.\");\n    }\n  };\n\n  // ‚úÖ Handle Adding a New User\n  const handleAddUser = async e => {\n    e.preventDefault();\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"‚ùå Unauthorized: Please log in again.\");\n        return;\n      }\n      if (!deptId) {\n        alert(\"‚ùå Department information missing. Please re-login.\");\n        return;\n      }\n      const response = await axios.post(\"http://localhost:8800/api/register\", {\n        username,\n        email,\n        password,\n        role,\n        dept_id: deptId,\n        // üîπ Use deptId from AuthContext\n        research_area: role === \"professor\" ? researchArea : undefined\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ User added successfully!\");\n      fetchUsers();\n      resetForm();\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error(\"‚ùå Error adding user:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error);\n      alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"‚ùå Failed to add user.\");\n    }\n  };\n\n  // ‚úÖ Handle Updating a User\n  const handleUpdateUser = async () => {\n    if (!selectedUser) return;\n\n    // üîπ HOD can only edit professors & cannot edit himself\n    if (userRole === \"hod\" && (role !== \"professor\" || selectedUser === userId)) {\n      alert(\"‚ùå HOD can only edit professors and cannot modify himself.\");\n      return;\n    }\n\n    // üîπ Admin cannot modify an HOD\n    if (userRole === \"admin\" && role === \"hod\") {\n      alert(\"‚ùå Admin cannot edit an HOD.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.put(`http://localhost:8800/api/update/${selectedUser}`, {\n        username,\n        email,\n        role\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ User updated successfully!\");\n      fetchUsers();\n      resetForm();\n    } catch (err) {\n      console.error(\"‚ùå Error updating user:\", err);\n      alert(\"‚ùå Failed to update user.\");\n    }\n  };\n\n  // ‚úÖ Handle Deleting a User\n  const handleDeleteUser = async (user_id, userRole) => {\n    // üîπ HOD can only delete professors & cannot delete himself\n    if (userRole === \"hod\" && (role !== \"professor\" || user_id === userId)) {\n      alert(\"‚ùå HOD can only delete professors and cannot delete himself.\");\n      return;\n    }\n\n    // üîπ Admin cannot delete an HOD\n    if (userRole === \"admin\" && role === \"hod\") {\n      alert(\"‚ùå Admin cannot delete an HOD.\");\n      return;\n    }\n    if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.delete(`http://localhost:8800/api/delete/${user_id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ User deleted successfully!\");\n      fetchUsers();\n    } catch (err) {\n      console.error(\"‚ùå Error deleting user:\", err);\n      alert(\"‚ùå Failed to delete user.\");\n    }\n  };\n\n  // ‚úÖ Reset Form Fields\n  const resetForm = () => {\n    setUsername(\"\");\n    setEmail(\"\");\n    setRole(\"\");\n    setResearchArea(\"\");\n    setPassword(\"\");\n    setSelectedUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"manage-users-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Manage Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add New User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAddUser,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: role,\n          onChange: e => setRole(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"admin\",\n            children: \"Admin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"professor\",\n            children: \"Professor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 21\n        }, this), role === \"professor\" && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Research Area (Optional)\",\n          value: researchArea,\n          onChange: e => setResearchArea(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Users List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"users-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.user_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.user_email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.role\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.user_id !== userId && (userRole === \"admin\" || userRole === \"hod\" && user.role === \"professor\") ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  setSelectedUser(user.user_id);\n                  setUsername(user.user_name);\n                  setEmail(user.user_email);\n                  setRole(user.role);\n                },\n                children: \"\\u270F\\uFE0F Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteUser(user.user_id, user.role),\n                children: \"\\uD83D\\uDDD1\\uFE0F Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u274C No Permission\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 29\n          }, this)]\n        }, user.user_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 9\n  }, this);\n};\n_s(ManageUsers, \"fjpqvHBaOX0NAKuxktSvls5oSVY=\");\n_c = ManageUsers;\nexport default ManageUsers;\nvar _c;\n$RefreshReg$(_c, \"ManageUsers\");","map":{"version":3,"names":["React","useEffect","useState","useContext","axios","AuthContext","jsxDEV","_jsxDEV","Fragment","_Fragment","ManageUsers","_s","users","setUsers","selectedUser","setSelectedUser","username","setUsername","email","setEmail","role","setRole","researchArea","setResearchArea","password","setPassword","deptId","userRole","userId","fetchUsers","token","localStorage","getItem","res","get","headers","Authorization","filteredUsers","data","filter","user","dept_id","err","_err$response","console","error","response","alert","handleAddUser","e","preventDefault","post","research_area","undefined","resetForm","_error$response","_error$response2","_error$response2$data","message","handleUpdateUser","put","handleDeleteUser","user_id","window","confirm","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","map","user_name","user_email","onClick","_c","$RefreshReg$"],"sources":["C:/Users/om/Desktop/uims - Copy/client/src/pages/ManageUsers.jsx"],"sourcesContent":["// import React, { useEffect, useState, useContext } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./ManageUsers.css\";\r\n// import { AuthContext } from \"../auth/AuthContext\";\r\n\r\n// const ManageUsers = () => {\r\n//     const [users, setUsers] = useState([]);\r\n//     const [selectedUser, setSelectedUser] = useState(null);\r\n//     const [username, setUsername] = useState(\"\");\r\n//     const [email, setEmail] = useState(\"\");\r\n//     const [role, setRole] = useState(\"\");\r\n//     const [researchArea, setResearchArea] = useState(\"\"); // For professors\r\n//     const [password, setPassword] = useState(\"\"); // New password field\r\n//     const { deptId, userRole, userId } = useContext(AuthContext);\r\n\r\n//     useEffect(() => {\r\n//         fetchUsers();\r\n//     }, []);\r\n\r\n//     // ‚úÖ Fetch Users\r\n//     const fetchUsers = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             console.log(\"üîç Fetching users... Token:\", token); // Debugging\r\n    \r\n//             const res = await axios.get(\"http://localhost:8800/api/users\", {\r\n//                 headers: { Authorization: `Bearer ${token}` }\r\n//             });\r\n\r\n//             const filteredUsers = userRole === \"hod\"\r\n//                 ? res.data.filter(user => user.dept_id === deptId)\r\n//                 : res.data;\r\n    \r\n//             console.log(\"‚úÖ Users fetched successfully:\", res.data);\r\n//             setUsers(res.data);\r\n//         } catch (err) {\r\n//             console.error(\"‚ùå Error fetching users:\", err.response?.data || err);\r\n//             alert(\"‚ùå Failed to fetch users.\");\r\n//         }\r\n//     };\r\n    \r\n\r\n//     // ‚úÖ Handle Adding a New User\r\n//     const handleAddUser = async (e) => {\r\n//         e.preventDefault(); // üö® Prevent page refresh\r\n\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             if (!token) {\r\n//                 alert(\"‚ùå Unauthorized: Please log in again.\");\r\n//                 return;\r\n//             }\r\n\r\n//             if (!deptId) {\r\n//                 alert(\"‚ùå Department information missing. Please re-login.\");\r\n//                 return;\r\n//             }\r\n\r\n//             const response = await axios.post(\r\n//                 \"http://localhost:8800/api/register\",\r\n//                 {\r\n//                     username,\r\n//                     email,\r\n//                     password,\r\n//                     role,\r\n//                     dept_id: deptId, // üîπ Use deptId from AuthContext\r\n//                     research_area: role === \"professor\" ? researchArea : undefined\r\n//                 },\r\n//                 { headers: { Authorization: `Bearer ${token}` } }\r\n//             );\r\n\r\n//             alert(\"‚úÖ User added successfully!\");\r\n//             console.log(response.data);\r\n//             fetchUsers(); // Refresh the user list\r\n//             resetForm();\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error adding user:\", error.response?.data || error);\r\n//             alert(error.response?.data?.message || \"‚ùå Failed to add user.\");\r\n//         }\r\n//     };\r\n\r\n//     // ‚úÖ Handle Updating a User\r\n//     const handleUpdateUser = async () => {\r\n//         if (!selectedUser) return;\r\n\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.put(\r\n//                 `http://localhost:8800/api/update/${selectedUser}`,\r\n//                 { username, email, role },\r\n//                 { headers: { Authorization: `Bearer ${token}` } }\r\n//             );\r\n\r\n//             alert(\"‚úÖ User updated successfully!\");\r\n//             fetchUsers();\r\n//             resetForm();\r\n//         } catch (err) {\r\n//             console.error(\"‚ùå Error updating user:\", err);\r\n//             alert(\"‚ùå Failed to update user.\");\r\n//         }\r\n//     };\r\n\r\n//     // ‚úÖ Handle Deleting a User\r\n//     const handleDeleteUser = async (user_id) => {\r\n//         if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.delete(`http://localhost:8800/api/delete/${user_id}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` }\r\n//             });\r\n\r\n//             alert(\"‚úÖ User deleted successfully!\");\r\n//             fetchUsers();\r\n//         } catch (err) {\r\n//             console.error(\"‚ùå Error deleting user:\", err);\r\n//             alert(\"‚ùå Failed to delete user.\");\r\n//         }\r\n//     };\r\n\r\n//     // ‚úÖ Reset Form Fields\r\n//     const resetForm = () => {\r\n//         setUsername(\"\");\r\n//         setEmail(\"\");\r\n//         setRole(\"\");\r\n//         setResearchArea(\"\");\r\n//         setPassword(\"\");\r\n//         setSelectedUser(null);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"manage-users-container\">\r\n//             <h2>Manage Users</h2>\r\n\r\n//             {/* Add User Form */}\r\n//             <div className=\"user-form\">\r\n//                 <h3>Add New User</h3>\r\n//                 <form onSubmit={handleAddUser}>\r\n//                     <input type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} required />\r\n//                     <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n//                     <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\r\n//                     <select value={role} onChange={(e) => setRole(e.target.value)} required>\r\n//                         <option value=\"\">Select Role</option>\r\n//                         <option value=\"admin\">Admin</option>\r\n//                         <option value=\"professor\">Professor</option>\r\n//                     </select>\r\n//                     {role === \"professor\" && (\r\n//                         <input type=\"text\" placeholder=\"Research Area (Optional)\" value={researchArea} onChange={(e) => setResearchArea(e.target.value)} />\r\n//                     )}\r\n//                     <button type=\"submit\">Add User</button>\r\n//                 </form>\r\n//             </div>\r\n\r\n//             {/* User List */}\r\n//             <h3>Users List</h3>\r\n//             <table className=\"users-table\">\r\n//                 <thead>\r\n//                     <tr>\r\n//                         <th>Username</th>\r\n//                         <th>Email</th>\r\n//                         <th>Role</th>\r\n//                         <th>Actions</th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {users.map((user) => (\r\n//                         <tr key={user.user_id}>\r\n//                             <td>{user.user_name}</td>\r\n//                             <td>{user.user_email}</td>\r\n//                             <td>{user.role}</td>\r\n//                             <td>\r\n//                                 <button onClick={() => { setSelectedUser(user.user_id); setUsername(user.user_name); setEmail(user.user_email); setRole(user.role); }}>‚úèÔ∏è Edit</button>\r\n//                                 <button onClick={() => handleDeleteUser(user.user_id)}>üóëÔ∏è Delete</button>\r\n//                             </td>\r\n//                         </tr>\r\n//                     ))}\r\n//                 </tbody>\r\n//             </table>\r\n\r\n//             {/* Update User Section */}\r\n//             {selectedUser && (\r\n//                 <div className=\"user-form\">\r\n//                     <h3>Update User</h3>\r\n//                     <input type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} required />\r\n//                     <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n//                     <select value={role} onChange={(e) => setRole(e.target.value)} required>\r\n//                         <option value=\"admin\">Admin</option>\r\n//                         <option value=\"professor\">Professor</option>\r\n//                     </select>\r\n//                     <button onClick={handleUpdateUser}>Update User</button>\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ManageUsers;\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./ManageUsers.css\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\n\r\nconst ManageUsers = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [role, setRole] = useState(\"\");\r\n    const [researchArea, setResearchArea] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const { deptId, userRole, userId } = useContext(AuthContext); // Get user data\r\n\r\n    useEffect(() => {\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    // ‚úÖ Fetch Users - Only from the same department\r\n    const fetchUsers = async () => {\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const res = await axios.get(\"http://localhost:8800/api/users\", {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            });\r\n\r\n            // üîπ Filter users from the same department\r\n            const filteredUsers = res.data.filter(user => user.dept_id === deptId);\r\n            setUsers(filteredUsers);\r\n        } catch (err) {\r\n            console.error(\"‚ùå Error fetching users:\", err.response?.data || err);\r\n            alert(\"‚ùå Failed to fetch users.\");\r\n        }\r\n    };\r\n\r\n    // ‚úÖ Handle Adding a New User\r\n    const handleAddUser = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            if (!token) {\r\n                alert(\"‚ùå Unauthorized: Please log in again.\");\r\n                return;\r\n            }\r\n\r\n            if (!deptId) {\r\n                alert(\"‚ùå Department information missing. Please re-login.\");\r\n                return;\r\n            }\r\n\r\n            const response = await axios.post(\r\n                \"http://localhost:8800/api/register\",\r\n                {\r\n                    username,\r\n                    email,\r\n                    password,\r\n                    role,\r\n                    dept_id: deptId, // üîπ Use deptId from AuthContext\r\n                    research_area: role === \"professor\" ? researchArea : undefined\r\n                },\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n\r\n            alert(\"‚úÖ User added successfully!\");\r\n            fetchUsers();\r\n            resetForm();\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error adding user:\", error.response?.data || error);\r\n            alert(error.response?.data?.message || \"‚ùå Failed to add user.\");\r\n        }\r\n    };\r\n\r\n    // ‚úÖ Handle Updating a User\r\n    const handleUpdateUser = async () => {\r\n        if (!selectedUser) return;\r\n\r\n        // üîπ HOD can only edit professors & cannot edit himself\r\n        if (userRole === \"hod\" && (role !== \"professor\" || selectedUser === userId)) {\r\n            alert(\"‚ùå HOD can only edit professors and cannot modify himself.\");\r\n            return;\r\n        }\r\n\r\n        // üîπ Admin cannot modify an HOD\r\n        if (userRole === \"admin\" && role === \"hod\") {\r\n            alert(\"‚ùå Admin cannot edit an HOD.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.put(\r\n                `http://localhost:8800/api/update/${selectedUser}`,\r\n                { username, email, role },\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n\r\n            alert(\"‚úÖ User updated successfully!\");\r\n            fetchUsers();\r\n            resetForm();\r\n        } catch (err) {\r\n            console.error(\"‚ùå Error updating user:\", err);\r\n            alert(\"‚ùå Failed to update user.\");\r\n        }\r\n    };\r\n\r\n    // ‚úÖ Handle Deleting a User\r\n    const handleDeleteUser = async (user_id, userRole) => {\r\n        // üîπ HOD can only delete professors & cannot delete himself\r\n        if (userRole === \"hod\" && (role !== \"professor\" || user_id === userId)) {\r\n            alert(\"‚ùå HOD can only delete professors and cannot delete himself.\");\r\n            return;\r\n        }\r\n\r\n        // üîπ Admin cannot delete an HOD\r\n        if (userRole === \"admin\" && role === \"hod\") {\r\n            alert(\"‚ùå Admin cannot delete an HOD.\");\r\n            return;\r\n        }\r\n\r\n        if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.delete(`http://localhost:8800/api/delete/${user_id}`, {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            });\r\n\r\n            alert(\"‚úÖ User deleted successfully!\");\r\n            fetchUsers();\r\n        } catch (err) {\r\n            console.error(\"‚ùå Error deleting user:\", err);\r\n            alert(\"‚ùå Failed to delete user.\");\r\n        }\r\n    };\r\n\r\n    // ‚úÖ Reset Form Fields\r\n    const resetForm = () => {\r\n        setUsername(\"\");\r\n        setEmail(\"\");\r\n        setRole(\"\");\r\n        setResearchArea(\"\");\r\n        setPassword(\"\");\r\n        setSelectedUser(null);\r\n    };\r\n\r\n    return (\r\n        <div className=\"manage-users-container\">\r\n            <h2>Manage Users</h2>\r\n\r\n            {/* Add User Form */}\r\n            <div className=\"user-form\">\r\n                <h3>Add New User</h3>\r\n                <form onSubmit={handleAddUser}>\r\n                    <input type=\"text\" placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} required />\r\n                    <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\r\n                    <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\r\n                    <select value={role} onChange={(e) => setRole(e.target.value)} required>\r\n                        <option value=\"\">Select Role</option>\r\n                        <option value=\"admin\">Admin</option>\r\n                        <option value=\"professor\">Professor</option>\r\n                    </select>\r\n                    {role === \"professor\" && (\r\n                        <input type=\"text\" placeholder=\"Research Area (Optional)\" value={researchArea} onChange={(e) => setResearchArea(e.target.value)} />\r\n                    )}\r\n                    <button type=\"submit\">Add User</button>\r\n                </form>\r\n            </div>\r\n\r\n            {/* User List */}\r\n            <h3>Users List</h3>\r\n            <table className=\"users-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Username</th>\r\n                        <th>Email</th>\r\n                        <th>Role</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map((user) => (\r\n                        <tr key={user.user_id}>\r\n                            <td>{user.user_name}</td>\r\n                            <td>{user.user_email}</td>\r\n                            <td>{user.role}</td>\r\n                            <td>\r\n                                {/* üîπ HOD can only edit/delete professors but NOT himself */}\r\n                                {/* üîπ Admin can edit/delete all users EXCEPT HODs */}\r\n                                {user.user_id !== userId && (userRole === \"admin\" || (userRole === \"hod\" && user.role === \"professor\")) ? (\r\n                                    <>\r\n                                        <button onClick={() => { \r\n                                            setSelectedUser(user.user_id); \r\n                                            setUsername(user.user_name); \r\n                                            setEmail(user.user_email); \r\n                                            setRole(user.role); \r\n                                        }}>\r\n                                            ‚úèÔ∏è Edit\r\n                                        </button>\r\n                                        <button onClick={() => handleDeleteUser(user.user_id, user.role)}>üóëÔ∏è Delete</button>\r\n                                    </>\r\n                                ) : (\r\n                                    <span>‚ùå No Permission</span>\r\n                                )}\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ManageUsers;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAC1B,SAASC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,YAAY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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}