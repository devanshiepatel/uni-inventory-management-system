{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\om\\\\Desktop\\\\uims - Copy\\\\client\\\\src\\\\pages\\\\Rooms.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useContext } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"./Rooms.css\";\n// import { AuthContext } from \"../auth/AuthContext\";\n\n// const Rooms = () => {\n//     const [rooms, setRooms] = useState([]);\n//     const navigate = useNavigate();\n//     const { deptId } = useContext(AuthContext); // ✅ Get deptId dynamically\n\n//     useEffect(() => {\n//         if (!deptId) return; // ✅ Avoid fetching if deptId is missing\n\n//         const fetchRooms = async () => {\n//             try {\n//                 const token = localStorage.getItem(\"token\");\n//                 const response = await axios.get(`http://localhost:8800/api/rooms/${deptId}`, {\n//                     headers: { Authorization: `Bearer ${token}` },\n//                 });\n//                 setRooms(response.data);\n//             } catch (error) {\n//                 console.error(\"❌ Error fetching rooms:\", error);\n//             }\n//         };\n\n//         fetchRooms();\n//     }, [deptId]); // ✅ Fetch when deptId changes\n\n//     return (\n//         <div className=\"rooms-container\">\n//             <h2>Rooms in Your Department</h2>\n\n//             <table className=\"rooms-table\">\n//                 <thead>\n//                     <tr>\n//                         <th>Room No.</th>\n//                         <th>Room ID</th>\n//                         <th>Capacity</th>\n//                         <th>Actions</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {rooms.map((room) => (\n//                         <tr key={room.room_id}>\n//                             <td>{room.room_num}</td>\n//                             <td>{room.room_id}</td>\n//                             <td>{room.capacity}</td>\n//                             <td>\n//                                 <button onClick={() => navigate(`/inventory/${room.room_id}`)}>\n//                                     View Inventory\n//                                 </button>\n//                             </td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n//         </div>\n//     );\n// };\n\n// export default Rooms;\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./Rooms.css\";\nimport { AuthContext } from \"../auth/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rooms = () => {\n  _s();\n  const {\n    roomType\n  } = useParams(); // Get the selected category (classroom, lab, utility)\n  const [rooms, setRooms] = useState([]);\n  const navigate = useNavigate();\n  const {\n    deptId\n  } = useContext(AuthContext); // Get department ID from AuthContext\n\n  useEffect(() => {\n    if (!deptId || !roomType) return; // Ensure both values exist before fetching\n    if (!roomType) {\n      console.error(\"❌ roomType is undefined or missing\");\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error: Invalid room category.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 20\n      }, this);\n    }\n    const fetchRooms = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        const response = await axios.get(`http://localhost:8800/api/rooms/${deptId}/${roomType}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setRooms(response.data);\n      } catch (error) {\n        console.error(\"❌ Error fetching rooms:\", error);\n      }\n    };\n    fetchRooms();\n  }, [deptId, roomType]); // Re-fetch when deptId or roomType changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rooms-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [roomType ? roomType.charAt(0).toUpperCase() + roomType.slice(1) : \"Unknown Category\", \" List\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"rooms-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Room No.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Room ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Capacity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: (rooms === null || rooms === void 0 ? void 0 : rooms.length) > 0 ? rooms.map(room => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: room.room_num\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: room.room_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: room.capacity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => navigate(`/inventory/${room.room_id}`),\n              children: \"View Inventory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this)]\n        }, room.room_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"4\",\n            children: \"No rooms available.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(Rooms, \"+pIPg1c6iV6UKYMdDuSnUuzbb4g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Rooms;\nexport default Rooms;\nvar _c;\n$RefreshReg$(_c, \"Rooms\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useNavigate","useParams","axios","AuthContext","jsxDEV","_jsxDEV","Rooms","_s","roomType","rooms","setRooms","navigate","deptId","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","fetchRooms","token","localStorage","getItem","response","get","headers","Authorization","data","className","charAt","toUpperCase","slice","length","map","room","room_num","room_id","capacity","onClick","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/om/Desktop/uims - Copy/client/src/pages/Rooms.jsx"],"sourcesContent":["// import React, { useEffect, useState, useContext } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import \"./Rooms.css\";\r\n// import { AuthContext } from \"../auth/AuthContext\";\r\n\r\n// const Rooms = () => {\r\n//     const [rooms, setRooms] = useState([]);\r\n//     const navigate = useNavigate();\r\n//     const { deptId } = useContext(AuthContext); // ✅ Get deptId dynamically\r\n\r\n//     useEffect(() => {\r\n//         if (!deptId) return; // ✅ Avoid fetching if deptId is missing\r\n\r\n//         const fetchRooms = async () => {\r\n//             try {\r\n//                 const token = localStorage.getItem(\"token\");\r\n//                 const response = await axios.get(`http://localhost:8800/api/rooms/${deptId}`, {\r\n//                     headers: { Authorization: `Bearer ${token}` },\r\n//                 });\r\n//                 setRooms(response.data);\r\n//             } catch (error) {\r\n//                 console.error(\"❌ Error fetching rooms:\", error);\r\n//             }\r\n//         };\r\n\r\n//         fetchRooms();\r\n//     }, [deptId]); // ✅ Fetch when deptId changes\r\n\r\n//     return (\r\n//         <div className=\"rooms-container\">\r\n//             <h2>Rooms in Your Department</h2>\r\n\r\n//             <table className=\"rooms-table\">\r\n//                 <thead>\r\n//                     <tr>\r\n//                         <th>Room No.</th>\r\n//                         <th>Room ID</th>\r\n//                         <th>Capacity</th>\r\n//                         <th>Actions</th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {rooms.map((room) => (\r\n//                         <tr key={room.room_id}>\r\n//                             <td>{room.room_num}</td>\r\n//                             <td>{room.room_id}</td>\r\n//                             <td>{room.capacity}</td>\r\n//                             <td>\r\n//                                 <button onClick={() => navigate(`/inventory/${room.room_id}`)}>\r\n//                                     View Inventory\r\n//                                 </button>\r\n//                             </td>\r\n//                         </tr>\r\n//                     ))}\r\n//                 </tbody>\r\n//             </table>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Rooms;\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./Rooms.css\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\n\r\nconst Rooms = () => {\r\n    const { roomType } = useParams(); // Get the selected category (classroom, lab, utility)\r\n    const [rooms, setRooms] = useState([]);\r\n    const navigate = useNavigate();\r\n    const { deptId } = useContext(AuthContext); // Get department ID from AuthContext\r\n\r\n    useEffect(() => {\r\n        if (!deptId || !roomType) return; // Ensure both values exist before fetching\r\n        if (!roomType) {\r\n            console.error(\"❌ roomType is undefined or missing\");\r\n            return <p>Error: Invalid room category.</p>;\r\n        }\r\n\r\n        const fetchRooms = async () => {\r\n            try {\r\n                const token = localStorage.getItem(\"token\");\r\n                const response = await axios.get(`http://localhost:8800/api/rooms/${deptId}/${roomType}`, {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                });\r\n                setRooms(response.data);\r\n            } catch (error) {\r\n                console.error(\"❌ Error fetching rooms:\", error);\r\n            }\r\n        };\r\n\r\n        fetchRooms();\r\n    }, [deptId, roomType]); // Re-fetch when deptId or roomType changes\r\n\r\n    return (\r\n        <div className=\"rooms-container\">\r\n        <h2>{roomType ? roomType.charAt(0).toUpperCase() + roomType.slice(1) : \"Unknown Category\"} List</h2>\r\n\r\n            <table className=\"rooms-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Room No.</th>\r\n                        <th>Room ID</th>\r\n                        <th>Capacity</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {rooms?.length > 0 ? (\r\n                    rooms.map((room) => (\r\n                        <tr key={room.room_id}>\r\n                            <td>{room.room_num}</td>\r\n                            <td>{room.room_id}</td>\r\n                            <td>{room.capacity}</td>\r\n                            <td>\r\n                                <button onClick={() => navigate(`/inventory/${room.room_id}`)}>View Inventory</button>\r\n                            </td>\r\n                        </tr>\r\n                    ))\r\n                ) : (\r\n                    <tr>\r\n                        <td colSpan=\"4\">No rooms available.</td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rooms;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}