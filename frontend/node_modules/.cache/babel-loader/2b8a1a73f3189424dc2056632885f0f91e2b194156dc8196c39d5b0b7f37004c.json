{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\om\\\\Desktop\\\\uims - Copy\\\\client\\\\src\\\\pages\\\\SuperAdminDashboard.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./SuperAdminDashboard.css\";\n\n// const SuperAdminDashboard = () => {\n//     const [departments, setDepartments] = useState([]);\n//     const [professors, setProfessors] = useState([]);\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n//     const [newDeptName, setNewDeptName] = useState(\"\");\n//     const [newDeptId, setNewDeptId] = useState(\"\");\n//     const [newHodName, setNewHodName] = useState(\"\");\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\n//     const [faculties, setFaculties] = useState([]); // ‚úÖ Store faculty list\n// const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // ‚úÖ Store selected faculty\n\n//     useEffect(() => {\n//         fetchDepartments();\n//     }, []);\n\n//     const fetchDepartments = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setDepartments(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching departments:\", error);\n//         }\n//     };\n\n//     const fetchFaculties = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setFaculties(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching faculties:\", error);\n//         }\n//     };\n\n//     fetchFaculties();\n\n//     const fetchProfessors = async (deptId) => {\n//         if (!deptId) return;\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setProfessors(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching professors:\", error);\n//         }\n//     };\n\n//     const handleAssignHOD = async () => {\n//         if (!selectedDepartment || !selectedProfessor) {\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\n//                 dept_id: selectedDepartment,\n//                 user_id: selectedProfessor,\n//             }, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ HOD assigned successfully!\");\n//             setSelectedProfessor(\"\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error assigning HOD:\", error);\n//             alert(\"‚ùå Failed to assign HOD.\");\n//         }\n//     };\n\n//     const handleCreateDepartment = async () => {\n//         if (!newDeptName || !newDeptId || !selectedFaculty || !newHodName || !newHodEmail || !newHodPassword) {\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\n//                 dept_id: newDeptId,\n//                 dept_name: newDeptName,\n//                 faculty_id: selectedFaculty, // üîπ Include faculty_id\n//                 hod_name: newHodName,\n//                 hod_email: newHodEmail,\n//                 hod_password: newHodPassword,\n//             }, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\n//             setNewDeptName(\"\");\n//             setNewDeptId(\"\");\n//             setSelectedFaculty(\"\");\n//             setNewHodName(\"\");\n//             setNewHodEmail(\"\");\n//             setNewHodPassword(\"\");\n//             fetchDepartments();\n//         } catch (error) {\n//             console.error(\"‚ùå Error creating department:\", error);\n//             alert(\"‚ùå Failed to create department.\");\n//         }\n//     };\n\n//     const handleDeleteHOD = async () => {\n//         if (!selectedDepartment) {\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ HOD deleted successfully!\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error deleting HOD:\", error);\n//             alert(\"‚ùå Failed to delete HOD.\");\n//         }\n//     };\n\n//     return (\n//         <div className=\"super-admin-dashboard\">\n//             <h2>Super Admin Dashboard</h2>\n\n//             {/* Assign HOD Section */}\n//             <div className=\"assign-hod-section\">\n//                 <h3>Assign HOD</h3>\n//                 <select onChange={(e) => {\n//                     setSelectedDepartment(e.target.value);\n//                     fetchProfessors(e.target.value);\n//                 }}>\n//                     <option value=\"\">Select Department</option>\n//                     {departments.map((dept) => (\n//                         <option key={dept.dept_id} value={dept.dept_id}>\n//                             {dept.dept_name}\n//                         </option>\n//                     ))}\n//                 </select>\n\n//                 <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\n//                     <option value=\"\">Select Professor</option>\n//                     {professors.map((prof) => (\n//                         <option key={prof.user_id} value={prof.user_id}>\n//                             {prof.user_name} - {prof.user_email}\n//                         </option>\n//                     ))}\n//                 </select>\n\n//                 <button onClick={handleAssignHOD}>Assign HOD</button>\n//                 <button onClick={handleDeleteHOD}>Delete HOD</button>\n//             </div>\n\n//             {/* Create Department Section */}\n//             <div className=\"create-department-section\">\n//                 <h3>Create New Department</h3>\n//                 <select value={selectedFaculty} onChange={(e) => setSelectedFaculty(e.target.value)} required>\n//     <option value=\"\">Select Faculty</option>\n//     {faculties.map((faculty) => (\n//         <option key={faculty.faculty_id} value={faculty.faculty_id}>\n//             {faculty.f_name}\n//         </option>\n//     ))}\n// </select>\n//                 <input type=\"text\" placeholder=\"Department ID\" value={newDeptId} onChange={(e) => setNewDeptId(e.target.value)} />\n//                 <input type=\"text\" placeholder=\"Department Name\" value={newDeptName} onChange={(e) => setNewDeptName(e.target.value)} />\n//                 <h4>Assign New HOD</h4>\n//                 <input type=\"text\" placeholder=\"HOD Name\" value={newHodName} onChange={(e) => setNewHodName(e.target.value)} />\n//                 <input type=\"email\" placeholder=\"HOD Email\" value={newHodEmail} onChange={(e) => setNewHodEmail(e.target.value)} />\n//                 <input type=\"password\" placeholder=\"HOD Password\" value={newHodPassword} onChange={(e) => setNewHodPassword(e.target.value)} />\n\n//                 <button onClick={handleCreateDepartment}>Create Department & Assign HOD</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SuperAdminDashboard;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SuperAdminDashboard = () => {\n  _s();\n  const [departments, setDepartments] = useState([]);\n  const [professors, setProfessors] = useState([]);\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n  const [newDeptName, setNewDeptName] = useState(\"\");\n  const [newDeptId, setNewDeptId] = useState(\"\");\n  const [newHodName, setNewHodName] = useState(\"\");\n  const [newHodEmail, setNewHodEmail] = useState(\"\");\n  const [newHodPassword, setNewHodPassword] = useState(\"\");\n  const [faculties, setFaculties] = useState([]); // Store faculty list\n  const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // Store selected faculty\n\n  useEffect(() => {\n    fetchDepartments();\n  }, []);\n  const fetchDepartments = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const res = await axios.get(\"http://localhost:8800/api/departments\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setDepartments(res.data);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching departments:\", error);\n    }\n  };\n  const fetchFaculties = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const res = await axios.get(\"http://localhost:8800/api/faculties\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFaculties(res.data);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching faculties:\", error);\n    }\n  };\n\n  // Fetch faculties on every render (if desired you can move this into useEffect)\n  fetchFaculties();\n  const fetchProfessors = async deptId => {\n    if (!deptId) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setProfessors(res.data);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching professors:\", error);\n    }\n  };\n  const handleAssignHOD = async () => {\n    if (!selectedDepartment || !selectedProfessor) {\n      alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\n        dept_id: selectedDepartment,\n        user_id: selectedProfessor\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ HOD assigned successfully!\");\n      setSelectedProfessor(\"\");\n      fetchProfessors(selectedDepartment);\n    } catch (error) {\n      console.error(\"‚ùå Error assigning HOD:\", error);\n      alert(\"‚ùå Failed to assign HOD.\");\n    }\n  };\n  const handleCreateDepartment = async () => {\n    if (!newDeptName || !newDeptId || !selectedFaculty || !newHodName || !newHodEmail || !newHodPassword) {\n      alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\n        dept_id: newDeptId,\n        dept_name: newDeptName,\n        faculty_id: selectedFaculty,\n        // Include faculty_id\n        hod_name: newHodName,\n        hod_email: newHodEmail,\n        hod_password: newHodPassword\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ Department created and HOD assigned successfully!\");\n      setNewDeptName(\"\");\n      setNewDeptId(\"\");\n      setSelectedFaculty(\"\");\n      setNewHodName(\"\");\n      setNewHodEmail(\"\");\n      setNewHodPassword(\"\");\n      fetchDepartments();\n    } catch (error) {\n      console.error(\"‚ùå Error creating department:\", error);\n      alert(\"‚ùå Failed to create department.\");\n    }\n  };\n  const handleDeleteHOD = async () => {\n    if (!selectedDepartment) {\n      alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ HOD deleted successfully!\");\n      fetchProfessors(selectedDepartment);\n    } catch (error) {\n      console.error(\"‚ùå Error deleting HOD:\", error);\n      alert(\"‚ùå Failed to delete HOD.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n                /* Global Styles */\n                body {\n                  margin: 0;\n                  padding: 0;\n                  font-family: Arial, sans-serif;\n                  background-color: #e9ecef;\n                }\n                \n                /* Super Admin Dashboard Container */\n                .super-admin-dashboard {\n                  display: flex;\n                  flex-direction: column;\n                  align-items: center;\n                  width: 100vw;\n                  min-height: 100vh;\n                  padding: 20px;\n                  background-color: #F3F4F6;\n                  box-sizing: border-box;\n                  color: #1E293B;\n                }\n                \n                .super-admin-dashboard h2 {\n                  margin-bottom: 20px;\n                  font-size: 2rem;\n                }\n                \n                /* Section Styling */\n                .assign-hod-section,\n                .create-department-section {\n                  background: #ffffff;\n                  padding: 20px;\n                  border-radius: 8px;\n                  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n                  margin-bottom: 20px;\n                  width: 100%;\n                  max-width: 800px;\n                }\n                \n                .assign-hod-section h3,\n                .create-department-section h3 {\n                  margin-top: 0;\n                }\n                \n                .assign-hod-section select,\n                .create-department-section select,\n                .create-department-section input {\n                  width: 100%;\n                  padding: 10px;\n                  margin: 8px 0;\n                  border: 1px solid #ccc;\n                  border-radius: 5px;\n                  box-sizing: border-box;\n                }\n                \n                /* Button Styling */\n                button {\n                  background-color: #007bff;\n                  color: white;\n                  padding: 10px 16px;\n                  border: none;\n                  border-radius: 5px;\n                  cursor: pointer;\n                  font-size: 14px;\n                  transition: background-color 0.3s;\n                  margin-right: 10px;\n                }\n                button:hover {\n                  background-color: #0056b3;\n                }\n                \n                /* Special button for Delete HOD (if needed) */\n                .delete-hod-button {\n                  background-color: #dc3545;\n                }\n                .delete-hod-button:hover {\n                  background-color: #a71d2a;\n                }\n                \n                /* Responsive adjustments */\n                @media (max-width: 768px) {\n                  .super-admin-dashboard {\n                    padding: 10px;\n                  }\n                  .assign-hod-section,\n                  .create-department-section {\n                    width: 100%;\n                  }\n                }\n            `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"super-admin-dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Super Admin Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"assign-hod-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Assign HOD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => {\n            setSelectedDepartment(e.target.value);\n            fetchProfessors(e.target.value);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 25\n          }, this), departments.map(dept => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: dept.dept_id,\n            children: dept.dept_name\n          }, dept.dept_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedProfessor,\n          onChange: e => setSelectedProfessor(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Professor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 25\n          }, this), professors.map(prof => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: prof.user_id,\n            children: [prof.user_name, \" - \", prof.user_email]\n          }, prof.user_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAssignHOD,\n          children: \"Assign HOD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDeleteHOD,\n          className: \"delete-hod-button\",\n          children: \"Delete HOD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create-department-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Create New Department\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedFaculty,\n          onChange: e => setSelectedFaculty(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Faculty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 25\n          }, this), faculties.map(faculty => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: faculty.faculty_id,\n            children: faculty.f_name\n          }, faculty.faculty_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Department ID\",\n          value: newDeptId,\n          onChange: e => setNewDeptId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Department Name\",\n          value: newDeptName,\n          onChange: e => setNewDeptName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Assign New HOD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"HOD Name\",\n          value: newHodName,\n          onChange: e => setNewHodName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"HOD Email\",\n          value: newHodEmail,\n          onChange: e => setNewHodEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"HOD Password\",\n          value: newHodPassword,\n          onChange: e => setNewHodPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateDepartment,\n          children: \"Create Department & Assign HOD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SuperAdminDashboard, \"eID8OK1HtSxrNqRiRGIOgIF26mk=\");\n_c = SuperAdminDashboard;\nexport default SuperAdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"SuperAdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","SuperAdminDashboard","_s","departments","setDepartments","professors","setProfessors","selectedDepartment","setSelectedDepartment","selectedProfessor","setSelectedProfessor","newDeptName","setNewDeptName","newDeptId","setNewDeptId","newHodName","setNewHodName","newHodEmail","setNewHodEmail","newHodPassword","setNewHodPassword","faculties","setFaculties","selectedFaculty","setSelectedFaculty","fetchDepartments","token","localStorage","getItem","res","get","headers","Authorization","data","error","console","fetchFaculties","fetchProfessors","deptId","handleAssignHOD","alert","put","dept_id","user_id","handleCreateDepartment","post","dept_name","faculty_id","hod_name","hod_email","hod_password","handleDeleteHOD","delete","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","e","target","value","map","dept","prof","user_name","user_email","onClick","required","faculty","f_name","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/om/Desktop/uims - Copy/client/src/pages/SuperAdminDashboard.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./SuperAdminDashboard.css\";\r\n\r\n// const SuperAdminDashboard = () => {\r\n//     const [departments, setDepartments] = useState([]);\r\n//     const [professors, setProfessors] = useState([]);\r\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n//     const [newDeptName, setNewDeptName] = useState(\"\");\r\n//     const [newDeptId, setNewDeptId] = useState(\"\");\r\n//     const [newHodName, setNewHodName] = useState(\"\");\r\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\r\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\r\n//     const [faculties, setFaculties] = useState([]); // ‚úÖ Store faculty list\r\n// const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // ‚úÖ Store selected faculty\r\n\r\n//     useEffect(() => {\r\n//         fetchDepartments();\r\n//     }, []);\r\n\r\n//     const fetchDepartments = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setDepartments(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching departments:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const fetchFaculties = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setFaculties(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching faculties:\", error);\r\n//         }\r\n//     };\r\n\r\n//     fetchFaculties();\r\n\r\n//     const fetchProfessors = async (deptId) => {\r\n//         if (!deptId) return;\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setProfessors(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching professors:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAssignHOD = async () => {\r\n//         if (!selectedDepartment || !selectedProfessor) {\r\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\r\n//                 dept_id: selectedDepartment,\r\n//                 user_id: selectedProfessor,\r\n//             }, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ HOD assigned successfully!\");\r\n//             setSelectedProfessor(\"\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error assigning HOD:\", error);\r\n//             alert(\"‚ùå Failed to assign HOD.\");\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const handleCreateDepartment = async () => {\r\n//         if (!newDeptName || !newDeptId || !selectedFaculty || !newHodName || !newHodEmail || !newHodPassword) {\r\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\r\n//                 dept_id: newDeptId,\r\n//                 dept_name: newDeptName,\r\n//                 faculty_id: selectedFaculty, // üîπ Include faculty_id\r\n//                 hod_name: newHodName,\r\n//                 hod_email: newHodEmail,\r\n//                 hod_password: newHodPassword,\r\n//             }, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\r\n//             setNewDeptName(\"\");\r\n//             setNewDeptId(\"\");\r\n//             setSelectedFaculty(\"\");\r\n//             setNewHodName(\"\");\r\n//             setNewHodEmail(\"\");\r\n//             setNewHodPassword(\"\");\r\n//             fetchDepartments();\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error creating department:\", error);\r\n//             alert(\"‚ùå Failed to create department.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteHOD = async () => {\r\n//         if (!selectedDepartment) {\r\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ HOD deleted successfully!\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error deleting HOD:\", error);\r\n//             alert(\"‚ùå Failed to delete HOD.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"super-admin-dashboard\">\r\n//             <h2>Super Admin Dashboard</h2>\r\n\r\n//             {/* Assign HOD Section */}\r\n//             <div className=\"assign-hod-section\">\r\n//                 <h3>Assign HOD</h3>\r\n//                 <select onChange={(e) => {\r\n//                     setSelectedDepartment(e.target.value);\r\n//                     fetchProfessors(e.target.value);\r\n//                 }}>\r\n//                     <option value=\"\">Select Department</option>\r\n//                     {departments.map((dept) => (\r\n//                         <option key={dept.dept_id} value={dept.dept_id}>\r\n//                             {dept.dept_name}\r\n//                         </option>\r\n//                     ))}\r\n//                 </select>\r\n\r\n//                 <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\r\n//                     <option value=\"\">Select Professor</option>\r\n//                     {professors.map((prof) => (\r\n//                         <option key={prof.user_id} value={prof.user_id}>\r\n//                             {prof.user_name} - {prof.user_email}\r\n//                         </option>\r\n//                     ))}\r\n//                 </select>\r\n\r\n//                 <button onClick={handleAssignHOD}>Assign HOD</button>\r\n//                 <button onClick={handleDeleteHOD}>Delete HOD</button>\r\n//             </div>\r\n\r\n//             {/* Create Department Section */}\r\n//             <div className=\"create-department-section\">\r\n//                 <h3>Create New Department</h3>\r\n//                 <select value={selectedFaculty} onChange={(e) => setSelectedFaculty(e.target.value)} required>\r\n//     <option value=\"\">Select Faculty</option>\r\n//     {faculties.map((faculty) => (\r\n//         <option key={faculty.faculty_id} value={faculty.faculty_id}>\r\n//             {faculty.f_name}\r\n//         </option>\r\n//     ))}\r\n// </select>\r\n//                 <input type=\"text\" placeholder=\"Department ID\" value={newDeptId} onChange={(e) => setNewDeptId(e.target.value)} />\r\n//                 <input type=\"text\" placeholder=\"Department Name\" value={newDeptName} onChange={(e) => setNewDeptName(e.target.value)} />\r\n//                 <h4>Assign New HOD</h4>\r\n//                 <input type=\"text\" placeholder=\"HOD Name\" value={newHodName} onChange={(e) => setNewHodName(e.target.value)} />\r\n//                 <input type=\"email\" placeholder=\"HOD Email\" value={newHodEmail} onChange={(e) => setNewHodEmail(e.target.value)} />\r\n//                 <input type=\"password\" placeholder=\"HOD Password\" value={newHodPassword} onChange={(e) => setNewHodPassword(e.target.value)} />\r\n\r\n//                 <button onClick={handleCreateDepartment}>Create Department & Assign HOD</button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default SuperAdminDashboard;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst SuperAdminDashboard = () => {\r\n    const [departments, setDepartments] = useState([]);\r\n    const [professors, setProfessors] = useState([]);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n    const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n    const [newDeptName, setNewDeptName] = useState(\"\");\r\n    const [newDeptId, setNewDeptId] = useState(\"\");\r\n    const [newHodName, setNewHodName] = useState(\"\");\r\n    const [newHodEmail, setNewHodEmail] = useState(\"\");\r\n    const [newHodPassword, setNewHodPassword] = useState(\"\");\r\n    const [faculties, setFaculties] = useState([]); // Store faculty list\r\n    const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // Store selected faculty\r\n\r\n    useEffect(() => {\r\n        fetchDepartments();\r\n    }, []);\r\n\r\n    const fetchDepartments = async () => {\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const res = await axios.get(\"http://localhost:8800/api/departments\", {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setDepartments(res.data);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error fetching departments:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchFaculties = async () => {\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const res = await axios.get(\"http://localhost:8800/api/faculties\", {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setFaculties(res.data);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error fetching faculties:\", error);\r\n        }\r\n    };\r\n\r\n    // Fetch faculties on every render (if desired you can move this into useEffect)\r\n    fetchFaculties();\r\n\r\n    const fetchProfessors = async (deptId) => {\r\n        if (!deptId) return;\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setProfessors(res.data);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error fetching professors:\", error);\r\n        }\r\n    };\r\n\r\n    const handleAssignHOD = async () => {\r\n        if (!selectedDepartment || !selectedProfessor) {\r\n            alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.put(\r\n                \"http://localhost:8800/api/superadmin/assign-hod\",\r\n                {\r\n                    dept_id: selectedDepartment,\r\n                    user_id: selectedProfessor,\r\n                },\r\n                {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                }\r\n            );\r\n            alert(\"‚úÖ HOD assigned successfully!\");\r\n            setSelectedProfessor(\"\");\r\n            fetchProfessors(selectedDepartment);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error assigning HOD:\", error);\r\n            alert(\"‚ùå Failed to assign HOD.\");\r\n        }\r\n    };\r\n\r\n    const handleCreateDepartment = async () => {\r\n        if (\r\n            !newDeptName ||\r\n            !newDeptId ||\r\n            !selectedFaculty ||\r\n            !newHodName ||\r\n            !newHodEmail ||\r\n            !newHodPassword\r\n        ) {\r\n            alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.post(\r\n                \"http://localhost:8800/api/superadmin/create-department\",\r\n                {\r\n                    dept_id: newDeptId,\r\n                    dept_name: newDeptName,\r\n                    faculty_id: selectedFaculty, // Include faculty_id\r\n                    hod_name: newHodName,\r\n                    hod_email: newHodEmail,\r\n                    hod_password: newHodPassword,\r\n                },\r\n                {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                }\r\n            );\r\n            alert(\"‚úÖ Department created and HOD assigned successfully!\");\r\n            setNewDeptName(\"\");\r\n            setNewDeptId(\"\");\r\n            setSelectedFaculty(\"\");\r\n            setNewHodName(\"\");\r\n            setNewHodEmail(\"\");\r\n            setNewHodPassword(\"\");\r\n            fetchDepartments();\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error creating department:\", error);\r\n            alert(\"‚ùå Failed to create department.\");\r\n        }\r\n    };\r\n\r\n    const handleDeleteHOD = async () => {\r\n        if (!selectedDepartment) {\r\n            alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            alert(\"‚úÖ HOD deleted successfully!\");\r\n            fetchProfessors(selectedDepartment);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error deleting HOD:\", error);\r\n            alert(\"‚ùå Failed to delete HOD.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Embedded CSS styling */}\r\n            <style>{`\r\n                /* Global Styles */\r\n                body {\r\n                  margin: 0;\r\n                  padding: 0;\r\n                  font-family: Arial, sans-serif;\r\n                  background-color: #e9ecef;\r\n                }\r\n                \r\n                /* Super Admin Dashboard Container */\r\n                .super-admin-dashboard {\r\n                  display: flex;\r\n                  flex-direction: column;\r\n                  align-items: center;\r\n                  width: 100vw;\r\n                  min-height: 100vh;\r\n                  padding: 20px;\r\n                  background-color: #F3F4F6;\r\n                  box-sizing: border-box;\r\n                  color: #1E293B;\r\n                }\r\n                \r\n                .super-admin-dashboard h2 {\r\n                  margin-bottom: 20px;\r\n                  font-size: 2rem;\r\n                }\r\n                \r\n                /* Section Styling */\r\n                .assign-hod-section,\r\n                .create-department-section {\r\n                  background: #ffffff;\r\n                  padding: 20px;\r\n                  border-radius: 8px;\r\n                  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n                  margin-bottom: 20px;\r\n                  width: 100%;\r\n                  max-width: 800px;\r\n                }\r\n                \r\n                .assign-hod-section h3,\r\n                .create-department-section h3 {\r\n                  margin-top: 0;\r\n                }\r\n                \r\n                .assign-hod-section select,\r\n                .create-department-section select,\r\n                .create-department-section input {\r\n                  width: 100%;\r\n                  padding: 10px;\r\n                  margin: 8px 0;\r\n                  border: 1px solid #ccc;\r\n                  border-radius: 5px;\r\n                  box-sizing: border-box;\r\n                }\r\n                \r\n                /* Button Styling */\r\n                button {\r\n                  background-color: #007bff;\r\n                  color: white;\r\n                  padding: 10px 16px;\r\n                  border: none;\r\n                  border-radius: 5px;\r\n                  cursor: pointer;\r\n                  font-size: 14px;\r\n                  transition: background-color 0.3s;\r\n                  margin-right: 10px;\r\n                }\r\n                button:hover {\r\n                  background-color: #0056b3;\r\n                }\r\n                \r\n                /* Special button for Delete HOD (if needed) */\r\n                .delete-hod-button {\r\n                  background-color: #dc3545;\r\n                }\r\n                .delete-hod-button:hover {\r\n                  background-color: #a71d2a;\r\n                }\r\n                \r\n                /* Responsive adjustments */\r\n                @media (max-width: 768px) {\r\n                  .super-admin-dashboard {\r\n                    padding: 10px;\r\n                  }\r\n                  .assign-hod-section,\r\n                  .create-department-section {\r\n                    width: 100%;\r\n                  }\r\n                }\r\n            `}</style>\r\n\r\n            <div className=\"super-admin-dashboard\">\r\n                <h2>Super Admin Dashboard</h2>\r\n\r\n                {/* Assign HOD Section */}\r\n                <div className=\"assign-hod-section\">\r\n                    <h3>Assign HOD</h3>\r\n                    <select\r\n                        onChange={(e) => {\r\n                            setSelectedDepartment(e.target.value);\r\n                            fetchProfessors(e.target.value);\r\n                        }}\r\n                    >\r\n                        <option value=\"\">Select Department</option>\r\n                        {departments.map((dept) => (\r\n                            <option key={dept.dept_id} value={dept.dept_id}>\r\n                                {dept.dept_name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n\r\n                    <select\r\n                        value={selectedProfessor}\r\n                        onChange={(e) => setSelectedProfessor(e.target.value)}\r\n                    >\r\n                        <option value=\"\">Select Professor</option>\r\n                        {professors.map((prof) => (\r\n                            <option key={prof.user_id} value={prof.user_id}>\r\n                                {prof.user_name} - {prof.user_email}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n\r\n                    <button onClick={handleAssignHOD}>Assign HOD</button>\r\n                    <button onClick={handleDeleteHOD} className=\"delete-hod-button\">\r\n                        Delete HOD\r\n                    </button>\r\n                </div>\r\n\r\n                {/* Create Department Section */}\r\n                <div className=\"create-department-section\">\r\n                    <h3>Create New Department</h3>\r\n                    <select\r\n                        value={selectedFaculty}\r\n                        onChange={(e) => setSelectedFaculty(e.target.value)}\r\n                        required\r\n                    >\r\n                        <option value=\"\">Select Faculty</option>\r\n                        {faculties.map((faculty) => (\r\n                            <option key={faculty.faculty_id} value={faculty.faculty_id}>\r\n                                {faculty.f_name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Department ID\"\r\n                        value={newDeptId}\r\n                        onChange={(e) => setNewDeptId(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Department Name\"\r\n                        value={newDeptName}\r\n                        onChange={(e) => setNewDeptName(e.target.value)}\r\n                    />\r\n                    <h4>Assign New HOD</h4>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"HOD Name\"\r\n                        value={newHodName}\r\n                        onChange={(e) => setNewHodName(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"HOD Email\"\r\n                        value={newHodEmail}\r\n                        onChange={(e) => setNewHodEmail(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"HOD Password\"\r\n                        value={newHodPassword}\r\n                        onChange={(e) => setNewHodPassword(e.target.value)}\r\n                    />\r\n\r\n                    <button onClick={handleCreateDepartment}>\r\n                        Create Department & Assign HOD\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SuperAdminDashboard;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,kBAAkB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}