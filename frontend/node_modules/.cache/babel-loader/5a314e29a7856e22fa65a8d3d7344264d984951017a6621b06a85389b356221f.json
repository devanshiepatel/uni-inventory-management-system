{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\om\\\\Desktop\\\\uims - Copy\\\\client\\\\src\\\\pages\\\\SuperAdminDashboard.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./SuperAdminDashboard.css\";\n\n// const SuperAdminDashboard = () => {\n//     const [departments, setDepartments] = useState([]);\n//     const [professors, setProfessors] = useState([]);\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n//     const [newDeptName, setNewDeptName] = useState(\"\");\n//     const [newDeptId, setNewDeptId] = useState(\"\");\n//     const [newHodName, setNewHodName] = useState(\"\");\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\n//     const [faculties, setFaculties] = useState([]); // ‚úÖ Store faculty list\n// const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // ‚úÖ Store selected faculty\n\n//     useEffect(() => {\n//         fetchDepartments();\n//     }, []);\n\n//     const fetchDepartments = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setDepartments(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching departments:\", error);\n//         }\n//     };\n\n//     const fetchFaculties = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setFaculties(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching faculties:\", error);\n//         }\n//     };\n\n//     fetchFaculties();\n\n//     const fetchProfessors = async (deptId) => {\n//         if (!deptId) return;\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setProfessors(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching professors:\", error);\n//         }\n//     };\n\n//     const handleAssignHOD = async () => {\n//         if (!selectedDepartment || !selectedProfessor) {\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\n//                 dept_id: selectedDepartment,\n//                 user_id: selectedProfessor,\n//             }, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ HOD assigned successfully!\");\n//             setSelectedProfessor(\"\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error assigning HOD:\", error);\n//             alert(\"‚ùå Failed to assign HOD.\");\n//         }\n//     };\n\n//     const handleCreateDepartment = async () => {\n//         if (!newDeptName || !newDeptId || !selectedFaculty || !newHodName || !newHodEmail || !newHodPassword) {\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\n//                 dept_id: newDeptId,\n//                 dept_name: newDeptName,\n//                 faculty_id: selectedFaculty, // üîπ Include faculty_id\n//                 hod_name: newHodName,\n//                 hod_email: newHodEmail,\n//                 hod_password: newHodPassword,\n//             }, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\n//             setNewDeptName(\"\");\n//             setNewDeptId(\"\");\n//             setSelectedFaculty(\"\");\n//             setNewHodName(\"\");\n//             setNewHodEmail(\"\");\n//             setNewHodPassword(\"\");\n//             fetchDepartments();\n//         } catch (error) {\n//             console.error(\"‚ùå Error creating department:\", error);\n//             alert(\"‚ùå Failed to create department.\");\n//         }\n//     };\n\n//     const handleDeleteHOD = async () => {\n//         if (!selectedDepartment) {\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ HOD deleted successfully!\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error deleting HOD:\", error);\n//             alert(\"‚ùå Failed to delete HOD.\");\n//         }\n//     };\n\n//     return (\n//         <div className=\"super-admin-dashboard\">\n//             <h2>Super Admin Dashboard</h2>\n\n//             {/* Assign HOD Section */}\n//             <div className=\"assign-hod-section\">\n//                 <h3>Assign HOD</h3>\n//                 <select onChange={(e) => {\n//                     setSelectedDepartment(e.target.value);\n//                     fetchProfessors(e.target.value);\n//                 }}>\n//                     <option value=\"\">Select Department</option>\n//                     {departments.map((dept) => (\n//                         <option key={dept.dept_id} value={dept.dept_id}>\n//                             {dept.dept_name}\n//                         </option>\n//                     ))}\n//                 </select>\n\n//                 <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\n//                     <option value=\"\">Select Professor</option>\n//                     {professors.map((prof) => (\n//                         <option key={prof.user_id} value={prof.user_id}>\n//                             {prof.user_name} - {prof.user_email}\n//                         </option>\n//                     ))}\n//                 </select>\n\n//                 <button onClick={handleAssignHOD}>Assign HOD</button>\n//                 <button onClick={handleDeleteHOD}>Delete HOD</button>\n//             </div>\n\n//             {/* Create Department Section */}\n//             <div className=\"create-department-section\">\n//                 <h3>Create New Department</h3>\n//                 <select value={selectedFaculty} onChange={(e) => setSelectedFaculty(e.target.value)} required>\n//     <option value=\"\">Select Faculty</option>\n//     {faculties.map((faculty) => (\n//         <option key={faculty.faculty_id} value={faculty.faculty_id}>\n//             {faculty.f_name}\n//         </option>\n//     ))}\n// </select>\n//                 <input type=\"text\" placeholder=\"Department ID\" value={newDeptId} onChange={(e) => setNewDeptId(e.target.value)} />\n//                 <input type=\"text\" placeholder=\"Department Name\" value={newDeptName} onChange={(e) => setNewDeptName(e.target.value)} />\n//                 <h4>Assign New HOD</h4>\n//                 <input type=\"text\" placeholder=\"HOD Name\" value={newHodName} onChange={(e) => setNewHodName(e.target.value)} />\n//                 <input type=\"email\" placeholder=\"HOD Email\" value={newHodEmail} onChange={(e) => setNewHodEmail(e.target.value)} />\n//                 <input type=\"password\" placeholder=\"HOD Password\" value={newHodPassword} onChange={(e) => setNewHodPassword(e.target.value)} />\n\n//                 <button onClick={handleCreateDepartment}>Create Department & Assign HOD</button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default SuperAdminDashboard;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// const SuperAdminDashboard = () => {\n//     const [departments, setDepartments] = useState([]);\n//     const [professors, setProfessors] = useState([]);\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n//     const [newDeptName, setNewDeptName] = useState(\"\");\n//     const [newDeptId, setNewDeptId] = useState(\"\");\n//     const [newHodName, setNewHodName] = useState(\"\");\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\n//     const [faculties, setFaculties] = useState([]); // Store faculty list\n//     const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // Store selected faculty\n\n//     useEffect(() => {\n//         fetchDepartments();\n//     }, []);\n\n//     const fetchDepartments = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setDepartments(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching departments:\", error);\n//         }\n//     };\n\n//     const fetchFaculties = async () => {\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setFaculties(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching faculties:\", error);\n//         }\n//     };\n\n//     // Fetch faculties on every render (if desired you can move this into useEffect)\n//     fetchFaculties();\n\n//     const fetchProfessors = async (deptId) => {\n//         if (!deptId) return;\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             setProfessors(res.data);\n//         } catch (error) {\n//             console.error(\"‚ùå Error fetching professors:\", error);\n//         }\n//     };\n\n//     const handleAssignHOD = async () => {\n//         if (!selectedDepartment || !selectedProfessor) {\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.put(\n//                 \"http://localhost:8800/api/superadmin/assign-hod\",\n//                 {\n//                     dept_id: selectedDepartment,\n//                     user_id: selectedProfessor,\n//                 },\n//                 {\n//                     headers: { Authorization: `Bearer ${token}` },\n//                 }\n//             );\n//             alert(\"‚úÖ HOD assigned successfully!\");\n//             setSelectedProfessor(\"\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error assigning HOD:\", error);\n//             alert(\"‚ùå Failed to assign HOD.\");\n//         }\n//     };\n\n//     const handleCreateDepartment = async () => {\n//         if (\n//             !newDeptName ||\n//             !newDeptId ||\n//             !selectedFaculty ||\n//             !newHodName ||\n//             !newHodEmail ||\n//             !newHodPassword\n//         ) {\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.post(\n//                 \"http://localhost:8800/api/superadmin/create-department\",\n//                 {\n//                     dept_id: newDeptId,\n//                     dept_name: newDeptName,\n//                     faculty_id: selectedFaculty, // Include faculty_id\n//                     hod_name: newHodName,\n//                     hod_email: newHodEmail,\n//                     hod_password: newHodPassword,\n//                 },\n//                 {\n//                     headers: { Authorization: `Bearer ${token}` },\n//                 }\n//             );\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\n//             setNewDeptName(\"\");\n//             setNewDeptId(\"\");\n//             setSelectedFaculty(\"\");\n//             setNewHodName(\"\");\n//             setNewHodEmail(\"\");\n//             setNewHodPassword(\"\");\n//             fetchDepartments();\n//         } catch (error) {\n//             console.error(\"‚ùå Error creating department:\", error);\n//             alert(\"‚ùå Failed to create department.\");\n//         }\n//     };\n\n//     const handleDeleteHOD = async () => {\n//         if (!selectedDepartment) {\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\n//             return;\n//         }\n//         try {\n//             const token = localStorage.getItem(\"token\");\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\n//                 headers: { Authorization: `Bearer ${token}` },\n//             });\n//             alert(\"‚úÖ HOD deleted successfully!\");\n//             fetchProfessors(selectedDepartment);\n//         } catch (error) {\n//             console.error(\"‚ùå Error deleting HOD:\", error);\n//             alert(\"‚ùå Failed to delete HOD.\");\n//         }\n//     };\n\n//     return (\n//         <>\n//             {/* Embedded CSS styling */}\n//             <style>{`\n//                 /* Global Styles */\n//                 body {\n//                   margin: 0;\n//                   padding: 0;\n//                   font-family: Arial, sans-serif;\n//                   background-color: #e9ecef;\n//                 }\n\n//                 /* Super Admin Dashboard Container */\n//                 .super-admin-dashboard {\n//                   display: flex;\n//                   flex-direction: column;\n//                   align-items: center;\n//                   width: 100vw;\n//                   min-height: 100vh;\n//                   padding: 20px;\n//                   background-color: #F3F4F6;\n//                   box-sizing: border-box;\n//                   color: #1E293B;\n//                 }\n\n//                 .super-admin-dashboard h2 {\n//                   margin-bottom: 20px;\n//                   font-size: 2rem;\n//                 }\n\n//                 /* Section Styling */\n//                 .assign-hod-section,\n//                 .create-department-section {\n//                   background: #ffffff;\n//                   padding: 20px;\n//                   border-radius: 8px;\n//                   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n//                   margin-bottom: 20px;\n//                   width: 100%;\n//                   max-width: 800px;\n//                 }\n\n//                 .assign-hod-section h3,\n//                 .create-department-section h3 {\n//                   margin-top: 0;\n//                 }\n\n//                 .assign-hod-section select,\n//                 .create-department-section select,\n//                 .create-department-section input {\n//                   width: 100%;\n//                   padding: 10px;\n//                   margin: 8px 0;\n//                   border: 1px solid #ccc;\n//                   border-radius: 5px;\n//                   box-sizing: border-box;\n//                 }\n\n//                 /* Button Styling */\n//                 button {\n//                   background-color: #007bff;\n//                   color: white;\n//                   padding: 10px 16px;\n//                   border: none;\n//                   border-radius: 5px;\n//                   cursor: pointer;\n//                   font-size: 14px;\n//                   transition: background-color 0.3s;\n//                   margin-right: 10px;\n//                 }\n//                 button:hover {\n//                   background-color: #0056b3;\n//                 }\n\n//                 /* Special button for Delete HOD (if needed) */\n//                 .delete-hod-button {\n//                   background-color: #dc3545;\n//                 }\n//                 .delete-hod-button:hover {\n//                   background-color: #a71d2a;\n//                 }\n\n//                 /* Responsive adjustments */\n//                 @media (max-width: 768px) {\n//                   .super-admin-dashboard {\n//                     padding: 10px;\n//                   }\n//                   .assign-hod-section,\n//                   .create-department-section {\n//                     width: 100%;\n//                   }\n//                 }\n//             `}</style>\n\n//             <div className=\"super-admin-dashboard\">\n//                 <h2>Super Admin Dashboard</h2>\n\n//                 {/* Assign HOD Section */}\n//                 <div className=\"assign-hod-section\">\n//                     <h3>Assign HOD</h3>\n//                     <select\n//                         onChange={(e) => {\n//                             setSelectedDepartment(e.target.value);\n//                             fetchProfessors(e.target.value);\n//                         }}\n//                     >\n//                         <option value=\"\">Select Department</option>\n//                         {departments.map((dept) => (\n//                             <option key={dept.dept_id} value={dept.dept_id}>\n//                                 {dept.dept_name}\n//                             </option>\n//                         ))}\n//                     </select>\n\n//                     <select\n//                         value={selectedProfessor}\n//                         onChange={(e) => setSelectedProfessor(e.target.value)}\n//                     >\n//                         <option value=\"\">Select Professor</option>\n//                         {professors.map((prof) => (\n//                             <option key={prof.user_id} value={prof.user_id}>\n//                                 {prof.user_name} - {prof.user_email}\n//                             </option>\n//                         ))}\n//                     </select>\n\n//                     <button onClick={handleAssignHOD}>Assign HOD</button>\n//                     <button onClick={handleDeleteHOD} className=\"delete-hod-button\">\n//                         Delete HOD\n//                     </button>\n//                 </div>\n\n//                 {/* Create Department Section */}\n//                 <div className=\"create-department-section\">\n//                     <h3>Create New Department</h3>\n//                     <select\n//                         value={selectedFaculty}\n//                         onChange={(e) => setSelectedFaculty(e.target.value)}\n//                         required\n//                     >\n//                         <option value=\"\">Select Faculty</option>\n//                         {faculties.map((faculty) => (\n//                             <option key={faculty.faculty_id} value={faculty.faculty_id}>\n//                                 {faculty.f_name}\n//                             </option>\n//                         ))}\n//                     </select>\n//                     <input\n//                         type=\"text\"\n//                         placeholder=\"Department ID\"\n//                         value={newDeptId}\n//                         onChange={(e) => setNewDeptId(e.target.value)}\n//                     />\n//                     <input\n//                         type=\"text\"\n//                         placeholder=\"Department Name\"\n//                         value={newDeptName}\n//                         onChange={(e) => setNewDeptName(e.target.value)}\n//                     />\n//                     <h4>Assign New HOD</h4>\n//                     <input\n//                         type=\"text\"\n//                         placeholder=\"HOD Name\"\n//                         value={newHodName}\n//                         onChange={(e) => setNewHodName(e.target.value)}\n//                     />\n//                     <input\n//                         type=\"email\"\n//                         placeholder=\"HOD Email\"\n//                         value={newHodEmail}\n//                         onChange={(e) => setNewHodEmail(e.target.value)}\n//                     />\n//                     <input\n//                         type=\"password\"\n//                         placeholder=\"HOD Password\"\n//                         value={newHodPassword}\n//                         onChange={(e) => setNewHodPassword(e.target.value)}\n//                     />\n\n//                     <button onClick={handleCreateDepartment}>\n//                         Create Department & Assign HOD\n//                     </button>\n//                 </div>\n//             </div>\n//         </>\n//     );\n// };\n\n// export default SuperAdminDashboard;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SuperAdminDashboard = () => {\n  _s();\n  const navigate = useNavigate();\n  const [departments, setDepartments] = useState([]);\n  const [professors, setProfessors] = useState([]);\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [selectedProfessor, setSelectedProfessor] = useState(\"\");\n  const [newDeptName, setNewDeptName] = useState(\"\");\n  const [newDeptId, setNewDeptId] = useState(\"\");\n  const [newHodName, setNewHodName] = useState(\"\");\n  const [newHodEmail, setNewHodEmail] = useState(\"\");\n  const [newHodPassword, setNewHodPassword] = useState(\"\");\n  const [faculties, setFaculties] = useState([]);\n  const [selectedFaculty, setSelectedFaculty] = useState(\"\");\n  const [userName, setUserName] = useState(localStorage.getItem(\"userName\") || \"\");\n  useEffect(() => {\n    fetchDepartments();\n  }, []);\n  const fetchDepartments = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const res = await axios.get(\"http://localhost:8800/api/departments\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setDepartments(res.data);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching departments:\", error);\n    }\n  };\n  const fetchFaculties = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const res = await axios.get(\"http://localhost:8800/api/faculties\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setFaculties(res.data);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching faculties:\", error);\n    }\n  };\n\n  // Fetch faculties on every render (can be moved to useEffect if preferred)\n  fetchFaculties();\n  const fetchProfessors = async deptId => {\n    if (!deptId) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setProfessors(res.data);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching professors:\", error);\n    }\n  };\n  const handleAssignHOD = async () => {\n    if (!selectedDepartment || !selectedProfessor) {\n      alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\n        dept_id: selectedDepartment,\n        user_id: selectedProfessor\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ HOD assigned successfully!\");\n      setSelectedProfessor(\"\");\n      fetchProfessors(selectedDepartment);\n    } catch (error) {\n      console.error(\"‚ùå Error assigning HOD:\", error);\n      alert(\"‚ùå Failed to assign HOD.\");\n    }\n  };\n  const handleCreateDepartment = async () => {\n    if (!newDeptName || !newDeptId || !selectedFaculty || !newHodName || !newHodEmail || !newHodPassword) {\n      alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\n        dept_id: newDeptId,\n        dept_name: newDeptName,\n        faculty_id: selectedFaculty,\n        hod_name: newHodName,\n        hod_email: newHodEmail,\n        hod_password: newHodPassword\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ Department created and HOD assigned successfully!\");\n      setNewDeptName(\"\");\n      setNewDeptId(\"\");\n      setSelectedFaculty(\"\");\n      setNewHodName(\"\");\n      setNewHodEmail(\"\");\n      setNewHodPassword(\"\");\n      fetchDepartments();\n    } catch (error) {\n      console.error(\"‚ùå Error creating department:\", error);\n      alert(\"‚ùå Failed to create department.\");\n    }\n  };\n  const handleDeleteHOD = async () => {\n    if (!selectedDepartment) {\n      alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\n      return;\n    }\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"‚úÖ HOD deleted successfully!\");\n      fetchProfessors(selectedDepartment);\n    } catch (error) {\n      console.error(\"‚ùå Error deleting HOD:\", error);\n      alert(\"‚ùå Failed to delete HOD.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n                /* Global Styles */\n                body {\n                  margin: 0;\n                  padding: 0;\n                  font-family: Arial, sans-serif;\n                  background-color: #e9ecef;\n                }\n                \n                /* Container using Grid Layout with Header and Sidebar */\n                .super-admin-dashboard {\n                  display: grid;\n                  grid-template-columns: 240px 1fr;\n                  grid-template-rows: auto 1fr;\n                  width: 100vw;\n                  height: 100vh;\n                  margin: 0;\n                  padding: 0;\n                  background-color: #F3F4F6;\n                  color: #1E293B;\n                }\n                \n                /* Top Header styling */\n                .top-header {\n                  grid-column: 2 / -1;\n                  grid-row: 1;\n                  background-color: #ffffff;\n                  padding: 16px 20px;\n                  display: flex;\n                  align-items: center;\n                  justify-content: space-between;\n                  border-bottom: 1px solid #CBD5E0;\n                  position: sticky;\n                  top: 0;\n                  z-index: 1000;\n                }\n                .back-button {\n                  background-color: transparent;\n                  color: #007bff;\n                  border: 2px solid #007bff;\n                  border-radius: 20px;\n                  padding: 6px 12px;\n                  cursor: pointer;\n                  font-size: 14px;\n                  transition: background-color 0.3s, color 0.3s;\n                }\n                .back-button:hover {\n                  background-color: #007bff;\n                  color: white;\n                }\n                .university-name {\n                  margin: 0;\n                  font-size: 1.5rem;\n                }\n                \n                /* Sidebar styling */\n                .sidebar {\n                  grid-column: 1;\n                  grid-row: 1 / -1;\n                  background-color: #1F2937;\n                  padding: 20px;\n                  display: flex;\n                  flex-direction: column;\n                  align-items: center;\n                  border-right: 1px solid #374151;\n                  color: #E5E7EB;\n                }\n                .user-icon {\n                  margin-bottom: 10px;\n                }\n                .user-name {\n                  margin-bottom: 20px;\n                  font-size: 1.1rem;\n                }\n                .menu-options {\n                  display: flex;\n                  flex-direction: column;\n                  width: 100%;\n                }\n                .menu-button {\n                  background-color: #2D3748;\n                  color: white;\n                  padding: 10px;\n                  border: none;\n                  border-radius: 5px;\n                  margin: 6px 0;\n                  cursor: pointer;\n                  font-size: 14px;\n                  transition: background-color 0.3s;\n                }\n                .menu-button:hover {\n                  background-color: #4A5568;\n                }\n                \n                /* Main Content styling */\n                .main-content {\n                  grid-column: 2 / -1;\n                  grid-row: 2 / -1;\n                  padding: 20px;\n                  width: 100%;\n                  box-sizing: border-box;\n                  overflow-y: auto;\n                  background-color: #ffffff;\n                }\n                \n                /* Section Styling */\n                .section {\n                  background: #ffffff;\n                  padding: 20px;\n                  border-radius: 8px;\n                  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n                  margin-bottom: 20px;\n                  width: 100%;\n                  max-width: 800px;\n                }\n                .section h3, .section h4 {\n                  margin-top: 0;\n                }\n                .section select, \n                .section input {\n                  width: 100%;\n                  padding: 10px;\n                  margin: 8px 0;\n                  border: 1px solid #ccc;\n                  border-radius: 5px;\n                  box-sizing: border-box;\n                }\n                \n                /* Button Styling */\n                button {\n                  background-color: #007bff;\n                  color: white;\n                  padding: 10px 16px;\n                  border: none;\n                  border-radius: 5px;\n                  cursor: pointer;\n                  font-size: 14px;\n                  transition: background-color 0.3s;\n                  margin-right: 10px;\n                }\n                button:hover {\n                  background-color: #0056b3;\n                }\n                .delete-hod-button {\n                  background-color: #dc3545;\n                }\n                .delete-hod-button:hover {\n                  background-color: #a71d2a;\n                }\n                \n                /* Responsive adjustments */\n                @media (max-width: 768px) {\n                  .super-admin-dashboard {\n                    grid-template-columns: 1fr;\n                    grid-template-rows: auto auto;\n                  }\n                  .sidebar {\n                    grid-column: 1;\n                    grid-row: 1;\n                    width: 100%;\n                    border-right: none;\n                    border-bottom: 1px solid #374151;\n                  }\n                  .top-header {\n                    grid-column: 1;\n                  }\n                  .main-content {\n                    grid-column: 1;\n                    grid-row: 2;\n                    padding: 20px;\n                  }\n                }\n            `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"super-admin-dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: () => navigate(-1),\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 856,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"university-name\",\n          children: \"Dharmshinh Desai University\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 857,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(FaUserCircle, {\n          size: 50,\n          className: \"user-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"user-name\",\n          children: userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"menu-options\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"menu-button\",\n            onClick: () => navigate(\"/dashboard\"),\n            children: \"Dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 865,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"menu-button\",\n            onClick: () => navigate(\"/manage-users\"),\n            children: \"Manage Users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"menu-button\",\n            onClick: () => navigate(\"/manage-inventory\"),\n            children: \"Manage Inventory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"menu-button\",\n            onClick: () => navigate(\"/settings\"),\n            children: \"\\u2699\\uFE0F Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Super Admin Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Assign HOD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => {\n              setSelectedDepartment(e.target.value);\n              fetchProfessors(e.target.value);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 885,\n              columnNumber: 29\n            }, this), departments.map(dept => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dept.dept_id,\n              children: dept.dept_name\n            }, dept.dept_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 887,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedProfessor,\n            onChange: e => setSelectedProfessor(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Professor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 896,\n              columnNumber: 29\n            }, this), professors.map(prof => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: prof.user_id,\n              children: [prof.user_name, \" - \", prof.user_email]\n            }, prof.user_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 898,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 892,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAssignHOD,\n            children: \"Assign HOD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDeleteHOD,\n            className: \"delete-hod-button\",\n            children: \"Delete HOD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 877,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Create New Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 911,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedFaculty,\n            onChange: e => setSelectedFaculty(e.target.value),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Faculty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 29\n            }, this), faculties.map(faculty => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: faculty.faculty_id,\n              children: faculty.f_name\n            }, faculty.faculty_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 919,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Department ID\",\n            value: newDeptId,\n            onChange: e => setNewDeptId(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Department Name\",\n            value: newDeptName,\n            onChange: e => setNewDeptName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 930,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Assign New HOD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 936,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"HOD Name\",\n            value: newHodName,\n            onChange: e => setNewHodName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"HOD Email\",\n            value: newHodEmail,\n            onChange: e => setNewHodEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 943,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"HOD Password\",\n            value: newHodPassword,\n            onChange: e => setNewHodPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCreateDepartment,\n            children: \"Create Department & Assign HOD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SuperAdminDashboard, \"njWUBqQzHzr5pUX5GsGea/Tg3HY=\", false, function () {\n  return [useNavigate];\n});\n_c = SuperAdminDashboard;\nexport default SuperAdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"SuperAdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","FaUserCircle","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","SuperAdminDashboard","_s","navigate","departments","setDepartments","professors","setProfessors","selectedDepartment","setSelectedDepartment","selectedProfessor","setSelectedProfessor","newDeptName","setNewDeptName","newDeptId","setNewDeptId","newHodName","setNewHodName","newHodEmail","setNewHodEmail","newHodPassword","setNewHodPassword","faculties","setFaculties","selectedFaculty","setSelectedFaculty","userName","setUserName","localStorage","getItem","fetchDepartments","token","res","get","headers","Authorization","data","error","console","fetchFaculties","fetchProfessors","deptId","handleAssignHOD","alert","put","dept_id","user_id","handleCreateDepartment","post","dept_name","faculty_id","hod_name","hod_email","hod_password","handleDeleteHOD","delete","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","size","onChange","e","target","value","map","dept","prof","user_name","user_email","required","faculty","f_name","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/om/Desktop/uims - Copy/client/src/pages/SuperAdminDashboard.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./SuperAdminDashboard.css\";\r\n\r\n// const SuperAdminDashboard = () => {\r\n//     const [departments, setDepartments] = useState([]);\r\n//     const [professors, setProfessors] = useState([]);\r\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n//     const [newDeptName, setNewDeptName] = useState(\"\");\r\n//     const [newDeptId, setNewDeptId] = useState(\"\");\r\n//     const [newHodName, setNewHodName] = useState(\"\");\r\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\r\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\r\n//     const [faculties, setFaculties] = useState([]); // ‚úÖ Store faculty list\r\n// const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // ‚úÖ Store selected faculty\r\n\r\n//     useEffect(() => {\r\n//         fetchDepartments();\r\n//     }, []);\r\n\r\n//     const fetchDepartments = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setDepartments(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching departments:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const fetchFaculties = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setFaculties(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching faculties:\", error);\r\n//         }\r\n//     };\r\n\r\n//     fetchFaculties();\r\n\r\n//     const fetchProfessors = async (deptId) => {\r\n//         if (!deptId) return;\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setProfessors(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching professors:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAssignHOD = async () => {\r\n//         if (!selectedDepartment || !selectedProfessor) {\r\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.put(\"http://localhost:8800/api/superadmin/assign-hod\", {\r\n//                 dept_id: selectedDepartment,\r\n//                 user_id: selectedProfessor,\r\n//             }, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ HOD assigned successfully!\");\r\n//             setSelectedProfessor(\"\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error assigning HOD:\", error);\r\n//             alert(\"‚ùå Failed to assign HOD.\");\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const handleCreateDepartment = async () => {\r\n//         if (!newDeptName || !newDeptId || !selectedFaculty || !newHodName || !newHodEmail || !newHodPassword) {\r\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.post(\"http://localhost:8800/api/superadmin/create-department\", {\r\n//                 dept_id: newDeptId,\r\n//                 dept_name: newDeptName,\r\n//                 faculty_id: selectedFaculty, // üîπ Include faculty_id\r\n//                 hod_name: newHodName,\r\n//                 hod_email: newHodEmail,\r\n//                 hod_password: newHodPassword,\r\n//             }, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\r\n//             setNewDeptName(\"\");\r\n//             setNewDeptId(\"\");\r\n//             setSelectedFaculty(\"\");\r\n//             setNewHodName(\"\");\r\n//             setNewHodEmail(\"\");\r\n//             setNewHodPassword(\"\");\r\n//             fetchDepartments();\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error creating department:\", error);\r\n//             alert(\"‚ùå Failed to create department.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteHOD = async () => {\r\n//         if (!selectedDepartment) {\r\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ HOD deleted successfully!\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error deleting HOD:\", error);\r\n//             alert(\"‚ùå Failed to delete HOD.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"super-admin-dashboard\">\r\n//             <h2>Super Admin Dashboard</h2>\r\n\r\n//             {/* Assign HOD Section */}\r\n//             <div className=\"assign-hod-section\">\r\n//                 <h3>Assign HOD</h3>\r\n//                 <select onChange={(e) => {\r\n//                     setSelectedDepartment(e.target.value);\r\n//                     fetchProfessors(e.target.value);\r\n//                 }}>\r\n//                     <option value=\"\">Select Department</option>\r\n//                     {departments.map((dept) => (\r\n//                         <option key={dept.dept_id} value={dept.dept_id}>\r\n//                             {dept.dept_name}\r\n//                         </option>\r\n//                     ))}\r\n//                 </select>\r\n\r\n//                 <select value={selectedProfessor} onChange={(e) => setSelectedProfessor(e.target.value)}>\r\n//                     <option value=\"\">Select Professor</option>\r\n//                     {professors.map((prof) => (\r\n//                         <option key={prof.user_id} value={prof.user_id}>\r\n//                             {prof.user_name} - {prof.user_email}\r\n//                         </option>\r\n//                     ))}\r\n//                 </select>\r\n\r\n//                 <button onClick={handleAssignHOD}>Assign HOD</button>\r\n//                 <button onClick={handleDeleteHOD}>Delete HOD</button>\r\n//             </div>\r\n\r\n//             {/* Create Department Section */}\r\n//             <div className=\"create-department-section\">\r\n//                 <h3>Create New Department</h3>\r\n//                 <select value={selectedFaculty} onChange={(e) => setSelectedFaculty(e.target.value)} required>\r\n//     <option value=\"\">Select Faculty</option>\r\n//     {faculties.map((faculty) => (\r\n//         <option key={faculty.faculty_id} value={faculty.faculty_id}>\r\n//             {faculty.f_name}\r\n//         </option>\r\n//     ))}\r\n// </select>\r\n//                 <input type=\"text\" placeholder=\"Department ID\" value={newDeptId} onChange={(e) => setNewDeptId(e.target.value)} />\r\n//                 <input type=\"text\" placeholder=\"Department Name\" value={newDeptName} onChange={(e) => setNewDeptName(e.target.value)} />\r\n//                 <h4>Assign New HOD</h4>\r\n//                 <input type=\"text\" placeholder=\"HOD Name\" value={newHodName} onChange={(e) => setNewHodName(e.target.value)} />\r\n//                 <input type=\"email\" placeholder=\"HOD Email\" value={newHodEmail} onChange={(e) => setNewHodEmail(e.target.value)} />\r\n//                 <input type=\"password\" placeholder=\"HOD Password\" value={newHodPassword} onChange={(e) => setNewHodPassword(e.target.value)} />\r\n\r\n//                 <button onClick={handleCreateDepartment}>Create Department & Assign HOD</button>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default SuperAdminDashboard;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// const SuperAdminDashboard = () => {\r\n//     const [departments, setDepartments] = useState([]);\r\n//     const [professors, setProfessors] = useState([]);\r\n//     const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n//     const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n//     const [newDeptName, setNewDeptName] = useState(\"\");\r\n//     const [newDeptId, setNewDeptId] = useState(\"\");\r\n//     const [newHodName, setNewHodName] = useState(\"\");\r\n//     const [newHodEmail, setNewHodEmail] = useState(\"\");\r\n//     const [newHodPassword, setNewHodPassword] = useState(\"\");\r\n//     const [faculties, setFaculties] = useState([]); // Store faculty list\r\n//     const [selectedFaculty, setSelectedFaculty] = useState(\"\"); // Store selected faculty\r\n\r\n//     useEffect(() => {\r\n//         fetchDepartments();\r\n//     }, []);\r\n\r\n//     const fetchDepartments = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/departments\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setDepartments(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching departments:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const fetchFaculties = async () => {\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(\"http://localhost:8800/api/faculties\", {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setFaculties(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching faculties:\", error);\r\n//         }\r\n//     };\r\n\r\n//     // Fetch faculties on every render (if desired you can move this into useEffect)\r\n//     fetchFaculties();\r\n\r\n//     const fetchProfessors = async (deptId) => {\r\n//         if (!deptId) return;\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             setProfessors(res.data);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error fetching professors:\", error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAssignHOD = async () => {\r\n//         if (!selectedDepartment || !selectedProfessor) {\r\n//             alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.put(\r\n//                 \"http://localhost:8800/api/superadmin/assign-hod\",\r\n//                 {\r\n//                     dept_id: selectedDepartment,\r\n//                     user_id: selectedProfessor,\r\n//                 },\r\n//                 {\r\n//                     headers: { Authorization: `Bearer ${token}` },\r\n//                 }\r\n//             );\r\n//             alert(\"‚úÖ HOD assigned successfully!\");\r\n//             setSelectedProfessor(\"\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error assigning HOD:\", error);\r\n//             alert(\"‚ùå Failed to assign HOD.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleCreateDepartment = async () => {\r\n//         if (\r\n//             !newDeptName ||\r\n//             !newDeptId ||\r\n//             !selectedFaculty ||\r\n//             !newHodName ||\r\n//             !newHodEmail ||\r\n//             !newHodPassword\r\n//         ) {\r\n//             alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.post(\r\n//                 \"http://localhost:8800/api/superadmin/create-department\",\r\n//                 {\r\n//                     dept_id: newDeptId,\r\n//                     dept_name: newDeptName,\r\n//                     faculty_id: selectedFaculty, // Include faculty_id\r\n//                     hod_name: newHodName,\r\n//                     hod_email: newHodEmail,\r\n//                     hod_password: newHodPassword,\r\n//                 },\r\n//                 {\r\n//                     headers: { Authorization: `Bearer ${token}` },\r\n//                 }\r\n//             );\r\n//             alert(\"‚úÖ Department created and HOD assigned successfully!\");\r\n//             setNewDeptName(\"\");\r\n//             setNewDeptId(\"\");\r\n//             setSelectedFaculty(\"\");\r\n//             setNewHodName(\"\");\r\n//             setNewHodEmail(\"\");\r\n//             setNewHodPassword(\"\");\r\n//             fetchDepartments();\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error creating department:\", error);\r\n//             alert(\"‚ùå Failed to create department.\");\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteHOD = async () => {\r\n//         if (!selectedDepartment) {\r\n//             alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\r\n//             return;\r\n//         }\r\n//         try {\r\n//             const token = localStorage.getItem(\"token\");\r\n//             await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\r\n//                 headers: { Authorization: `Bearer ${token}` },\r\n//             });\r\n//             alert(\"‚úÖ HOD deleted successfully!\");\r\n//             fetchProfessors(selectedDepartment);\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error deleting HOD:\", error);\r\n//             alert(\"‚ùå Failed to delete HOD.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <>\r\n//             {/* Embedded CSS styling */}\r\n//             <style>{`\r\n//                 /* Global Styles */\r\n//                 body {\r\n//                   margin: 0;\r\n//                   padding: 0;\r\n//                   font-family: Arial, sans-serif;\r\n//                   background-color: #e9ecef;\r\n//                 }\r\n                \r\n//                 /* Super Admin Dashboard Container */\r\n//                 .super-admin-dashboard {\r\n//                   display: flex;\r\n//                   flex-direction: column;\r\n//                   align-items: center;\r\n//                   width: 100vw;\r\n//                   min-height: 100vh;\r\n//                   padding: 20px;\r\n//                   background-color: #F3F4F6;\r\n//                   box-sizing: border-box;\r\n//                   color: #1E293B;\r\n//                 }\r\n                \r\n//                 .super-admin-dashboard h2 {\r\n//                   margin-bottom: 20px;\r\n//                   font-size: 2rem;\r\n//                 }\r\n                \r\n//                 /* Section Styling */\r\n//                 .assign-hod-section,\r\n//                 .create-department-section {\r\n//                   background: #ffffff;\r\n//                   padding: 20px;\r\n//                   border-radius: 8px;\r\n//                   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n//                   margin-bottom: 20px;\r\n//                   width: 100%;\r\n//                   max-width: 800px;\r\n//                 }\r\n                \r\n//                 .assign-hod-section h3,\r\n//                 .create-department-section h3 {\r\n//                   margin-top: 0;\r\n//                 }\r\n                \r\n//                 .assign-hod-section select,\r\n//                 .create-department-section select,\r\n//                 .create-department-section input {\r\n//                   width: 100%;\r\n//                   padding: 10px;\r\n//                   margin: 8px 0;\r\n//                   border: 1px solid #ccc;\r\n//                   border-radius: 5px;\r\n//                   box-sizing: border-box;\r\n//                 }\r\n                \r\n//                 /* Button Styling */\r\n//                 button {\r\n//                   background-color: #007bff;\r\n//                   color: white;\r\n//                   padding: 10px 16px;\r\n//                   border: none;\r\n//                   border-radius: 5px;\r\n//                   cursor: pointer;\r\n//                   font-size: 14px;\r\n//                   transition: background-color 0.3s;\r\n//                   margin-right: 10px;\r\n//                 }\r\n//                 button:hover {\r\n//                   background-color: #0056b3;\r\n//                 }\r\n                \r\n//                 /* Special button for Delete HOD (if needed) */\r\n//                 .delete-hod-button {\r\n//                   background-color: #dc3545;\r\n//                 }\r\n//                 .delete-hod-button:hover {\r\n//                   background-color: #a71d2a;\r\n//                 }\r\n                \r\n//                 /* Responsive adjustments */\r\n//                 @media (max-width: 768px) {\r\n//                   .super-admin-dashboard {\r\n//                     padding: 10px;\r\n//                   }\r\n//                   .assign-hod-section,\r\n//                   .create-department-section {\r\n//                     width: 100%;\r\n//                   }\r\n//                 }\r\n//             `}</style>\r\n\r\n//             <div className=\"super-admin-dashboard\">\r\n//                 <h2>Super Admin Dashboard</h2>\r\n\r\n//                 {/* Assign HOD Section */}\r\n//                 <div className=\"assign-hod-section\">\r\n//                     <h3>Assign HOD</h3>\r\n//                     <select\r\n//                         onChange={(e) => {\r\n//                             setSelectedDepartment(e.target.value);\r\n//                             fetchProfessors(e.target.value);\r\n//                         }}\r\n//                     >\r\n//                         <option value=\"\">Select Department</option>\r\n//                         {departments.map((dept) => (\r\n//                             <option key={dept.dept_id} value={dept.dept_id}>\r\n//                                 {dept.dept_name}\r\n//                             </option>\r\n//                         ))}\r\n//                     </select>\r\n\r\n//                     <select\r\n//                         value={selectedProfessor}\r\n//                         onChange={(e) => setSelectedProfessor(e.target.value)}\r\n//                     >\r\n//                         <option value=\"\">Select Professor</option>\r\n//                         {professors.map((prof) => (\r\n//                             <option key={prof.user_id} value={prof.user_id}>\r\n//                                 {prof.user_name} - {prof.user_email}\r\n//                             </option>\r\n//                         ))}\r\n//                     </select>\r\n\r\n//                     <button onClick={handleAssignHOD}>Assign HOD</button>\r\n//                     <button onClick={handleDeleteHOD} className=\"delete-hod-button\">\r\n//                         Delete HOD\r\n//                     </button>\r\n//                 </div>\r\n\r\n//                 {/* Create Department Section */}\r\n//                 <div className=\"create-department-section\">\r\n//                     <h3>Create New Department</h3>\r\n//                     <select\r\n//                         value={selectedFaculty}\r\n//                         onChange={(e) => setSelectedFaculty(e.target.value)}\r\n//                         required\r\n//                     >\r\n//                         <option value=\"\">Select Faculty</option>\r\n//                         {faculties.map((faculty) => (\r\n//                             <option key={faculty.faculty_id} value={faculty.faculty_id}>\r\n//                                 {faculty.f_name}\r\n//                             </option>\r\n//                         ))}\r\n//                     </select>\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         placeholder=\"Department ID\"\r\n//                         value={newDeptId}\r\n//                         onChange={(e) => setNewDeptId(e.target.value)}\r\n//                     />\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         placeholder=\"Department Name\"\r\n//                         value={newDeptName}\r\n//                         onChange={(e) => setNewDeptName(e.target.value)}\r\n//                     />\r\n//                     <h4>Assign New HOD</h4>\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         placeholder=\"HOD Name\"\r\n//                         value={newHodName}\r\n//                         onChange={(e) => setNewHodName(e.target.value)}\r\n//                     />\r\n//                     <input\r\n//                         type=\"email\"\r\n//                         placeholder=\"HOD Email\"\r\n//                         value={newHodEmail}\r\n//                         onChange={(e) => setNewHodEmail(e.target.value)}\r\n//                     />\r\n//                     <input\r\n//                         type=\"password\"\r\n//                         placeholder=\"HOD Password\"\r\n//                         value={newHodPassword}\r\n//                         onChange={(e) => setNewHodPassword(e.target.value)}\r\n//                     />\r\n\r\n//                     <button onClick={handleCreateDepartment}>\r\n//                         Create Department & Assign HOD\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </>\r\n//     );\r\n// };\r\n\r\n// export default SuperAdminDashboard;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst SuperAdminDashboard = () => {\r\n    const navigate = useNavigate();\r\n    const [departments, setDepartments] = useState([]);\r\n    const [professors, setProfessors] = useState([]);\r\n    const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n    const [selectedProfessor, setSelectedProfessor] = useState(\"\");\r\n    const [newDeptName, setNewDeptName] = useState(\"\");\r\n    const [newDeptId, setNewDeptId] = useState(\"\");\r\n    const [newHodName, setNewHodName] = useState(\"\");\r\n    const [newHodEmail, setNewHodEmail] = useState(\"\");\r\n    const [newHodPassword, setNewHodPassword] = useState(\"\");\r\n    const [faculties, setFaculties] = useState([]);\r\n    const [selectedFaculty, setSelectedFaculty] = useState(\"\");\r\n    const [userName, setUserName] = useState(localStorage.getItem(\"userName\") || \"\");\r\n\r\n    useEffect(() => {\r\n        fetchDepartments();\r\n    }, []);\r\n\r\n    const fetchDepartments = async () => {\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const res = await axios.get(\"http://localhost:8800/api/departments\", {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setDepartments(res.data);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error fetching departments:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchFaculties = async () => {\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const res = await axios.get(\"http://localhost:8800/api/faculties\", {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setFaculties(res.data);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error fetching faculties:\", error);\r\n        }\r\n    };\r\n\r\n    // Fetch faculties on every render (can be moved to useEffect if preferred)\r\n    fetchFaculties();\r\n\r\n    const fetchProfessors = async (deptId) => {\r\n        if (!deptId) return;\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const res = await axios.get(`http://localhost:8800/api/professors/${deptId}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setProfessors(res.data);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error fetching professors:\", error);\r\n        }\r\n    };\r\n\r\n    const handleAssignHOD = async () => {\r\n        if (!selectedDepartment || !selectedProfessor) {\r\n            alert(\"‚ö†Ô∏è Please select both a department and a professor.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.put(\r\n                \"http://localhost:8800/api/superadmin/assign-hod\",\r\n                {\r\n                    dept_id: selectedDepartment,\r\n                    user_id: selectedProfessor,\r\n                },\r\n                {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                }\r\n            );\r\n            alert(\"‚úÖ HOD assigned successfully!\");\r\n            setSelectedProfessor(\"\");\r\n            fetchProfessors(selectedDepartment);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error assigning HOD:\", error);\r\n            alert(\"‚ùå Failed to assign HOD.\");\r\n        }\r\n    };\r\n\r\n    const handleCreateDepartment = async () => {\r\n        if (\r\n            !newDeptName ||\r\n            !newDeptId ||\r\n            !selectedFaculty ||\r\n            !newHodName ||\r\n            !newHodEmail ||\r\n            !newHodPassword\r\n        ) {\r\n            alert(\"‚ö†Ô∏è Please fill in all fields to create a department and assign a HOD.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.post(\r\n                \"http://localhost:8800/api/superadmin/create-department\",\r\n                {\r\n                    dept_id: newDeptId,\r\n                    dept_name: newDeptName,\r\n                    faculty_id: selectedFaculty,\r\n                    hod_name: newHodName,\r\n                    hod_email: newHodEmail,\r\n                    hod_password: newHodPassword,\r\n                },\r\n                {\r\n                    headers: { Authorization: `Bearer ${token}` },\r\n                }\r\n            );\r\n            alert(\"‚úÖ Department created and HOD assigned successfully!\");\r\n            setNewDeptName(\"\");\r\n            setNewDeptId(\"\");\r\n            setSelectedFaculty(\"\");\r\n            setNewHodName(\"\");\r\n            setNewHodEmail(\"\");\r\n            setNewHodPassword(\"\");\r\n            fetchDepartments();\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error creating department:\", error);\r\n            alert(\"‚ùå Failed to create department.\");\r\n        }\r\n    };\r\n\r\n    const handleDeleteHOD = async () => {\r\n        if (!selectedDepartment) {\r\n            alert(\"‚ö†Ô∏è Please select a department to remove its HOD.\");\r\n            return;\r\n        }\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            await axios.delete(`http://localhost:8800/api/superadmin/delete-hod/${selectedDepartment}`, {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            alert(\"‚úÖ HOD deleted successfully!\");\r\n            fetchProfessors(selectedDepartment);\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error deleting HOD:\", error);\r\n            alert(\"‚ùå Failed to delete HOD.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Embedded CSS styling */}\r\n            <style>{`\r\n                /* Global Styles */\r\n                body {\r\n                  margin: 0;\r\n                  padding: 0;\r\n                  font-family: Arial, sans-serif;\r\n                  background-color: #e9ecef;\r\n                }\r\n                \r\n                /* Container using Grid Layout with Header and Sidebar */\r\n                .super-admin-dashboard {\r\n                  display: grid;\r\n                  grid-template-columns: 240px 1fr;\r\n                  grid-template-rows: auto 1fr;\r\n                  width: 100vw;\r\n                  height: 100vh;\r\n                  margin: 0;\r\n                  padding: 0;\r\n                  background-color: #F3F4F6;\r\n                  color: #1E293B;\r\n                }\r\n                \r\n                /* Top Header styling */\r\n                .top-header {\r\n                  grid-column: 2 / -1;\r\n                  grid-row: 1;\r\n                  background-color: #ffffff;\r\n                  padding: 16px 20px;\r\n                  display: flex;\r\n                  align-items: center;\r\n                  justify-content: space-between;\r\n                  border-bottom: 1px solid #CBD5E0;\r\n                  position: sticky;\r\n                  top: 0;\r\n                  z-index: 1000;\r\n                }\r\n                .back-button {\r\n                  background-color: transparent;\r\n                  color: #007bff;\r\n                  border: 2px solid #007bff;\r\n                  border-radius: 20px;\r\n                  padding: 6px 12px;\r\n                  cursor: pointer;\r\n                  font-size: 14px;\r\n                  transition: background-color 0.3s, color 0.3s;\r\n                }\r\n                .back-button:hover {\r\n                  background-color: #007bff;\r\n                  color: white;\r\n                }\r\n                .university-name {\r\n                  margin: 0;\r\n                  font-size: 1.5rem;\r\n                }\r\n                \r\n                /* Sidebar styling */\r\n                .sidebar {\r\n                  grid-column: 1;\r\n                  grid-row: 1 / -1;\r\n                  background-color: #1F2937;\r\n                  padding: 20px;\r\n                  display: flex;\r\n                  flex-direction: column;\r\n                  align-items: center;\r\n                  border-right: 1px solid #374151;\r\n                  color: #E5E7EB;\r\n                }\r\n                .user-icon {\r\n                  margin-bottom: 10px;\r\n                }\r\n                .user-name {\r\n                  margin-bottom: 20px;\r\n                  font-size: 1.1rem;\r\n                }\r\n                .menu-options {\r\n                  display: flex;\r\n                  flex-direction: column;\r\n                  width: 100%;\r\n                }\r\n                .menu-button {\r\n                  background-color: #2D3748;\r\n                  color: white;\r\n                  padding: 10px;\r\n                  border: none;\r\n                  border-radius: 5px;\r\n                  margin: 6px 0;\r\n                  cursor: pointer;\r\n                  font-size: 14px;\r\n                  transition: background-color 0.3s;\r\n                }\r\n                .menu-button:hover {\r\n                  background-color: #4A5568;\r\n                }\r\n                \r\n                /* Main Content styling */\r\n                .main-content {\r\n                  grid-column: 2 / -1;\r\n                  grid-row: 2 / -1;\r\n                  padding: 20px;\r\n                  width: 100%;\r\n                  box-sizing: border-box;\r\n                  overflow-y: auto;\r\n                  background-color: #ffffff;\r\n                }\r\n                \r\n                /* Section Styling */\r\n                .section {\r\n                  background: #ffffff;\r\n                  padding: 20px;\r\n                  border-radius: 8px;\r\n                  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\r\n                  margin-bottom: 20px;\r\n                  width: 100%;\r\n                  max-width: 800px;\r\n                }\r\n                .section h3, .section h4 {\r\n                  margin-top: 0;\r\n                }\r\n                .section select, \r\n                .section input {\r\n                  width: 100%;\r\n                  padding: 10px;\r\n                  margin: 8px 0;\r\n                  border: 1px solid #ccc;\r\n                  border-radius: 5px;\r\n                  box-sizing: border-box;\r\n                }\r\n                \r\n                /* Button Styling */\r\n                button {\r\n                  background-color: #007bff;\r\n                  color: white;\r\n                  padding: 10px 16px;\r\n                  border: none;\r\n                  border-radius: 5px;\r\n                  cursor: pointer;\r\n                  font-size: 14px;\r\n                  transition: background-color 0.3s;\r\n                  margin-right: 10px;\r\n                }\r\n                button:hover {\r\n                  background-color: #0056b3;\r\n                }\r\n                .delete-hod-button {\r\n                  background-color: #dc3545;\r\n                }\r\n                .delete-hod-button:hover {\r\n                  background-color: #a71d2a;\r\n                }\r\n                \r\n                /* Responsive adjustments */\r\n                @media (max-width: 768px) {\r\n                  .super-admin-dashboard {\r\n                    grid-template-columns: 1fr;\r\n                    grid-template-rows: auto auto;\r\n                  }\r\n                  .sidebar {\r\n                    grid-column: 1;\r\n                    grid-row: 1;\r\n                    width: 100%;\r\n                    border-right: none;\r\n                    border-bottom: 1px solid #374151;\r\n                  }\r\n                  .top-header {\r\n                    grid-column: 1;\r\n                  }\r\n                  .main-content {\r\n                    grid-column: 1;\r\n                    grid-row: 2;\r\n                    padding: 20px;\r\n                  }\r\n                }\r\n            `}</style>\r\n\r\n            <div className=\"super-admin-dashboard\">\r\n                {/* Top Header */}\r\n                <div className=\"top-header\">\r\n                    <button className=\"back-button\" onClick={() => navigate(-1)}>‚Üê Back</button>\r\n                    <h1 className=\"university-name\">Dharmshinh Desai University</h1>\r\n                </div>\r\n                \r\n                {/* Sidebar */}\r\n                <div className=\"sidebar\">\r\n                    <FaUserCircle size={50} className=\"user-icon\" />\r\n                    <p className=\"user-name\">{userName}</p>\r\n                    <div className=\"menu-options\">\r\n                        <button className=\"menu-button\" onClick={() => navigate(\"/dashboard\")}>Dashboard</button>\r\n                        <button className=\"menu-button\" onClick={() => navigate(\"/manage-users\")}>Manage Users</button>\r\n                        <button className=\"menu-button\" onClick={() => navigate(\"/manage-inventory\")}>Manage Inventory</button>\r\n                        <button className=\"menu-button\" onClick={() => navigate(\"/settings\")}>‚öôÔ∏è Settings</button>\r\n                    </div>\r\n                </div>\r\n                \r\n                {/* Main Content */}\r\n                <div className=\"main-content\">\r\n                    <h2>Super Admin Dashboard</h2>\r\n                    \r\n                    {/* Assign HOD Section */}\r\n                    <div className=\"section\">\r\n                        <h3>Assign HOD</h3>\r\n                        <select\r\n                            onChange={(e) => {\r\n                                setSelectedDepartment(e.target.value);\r\n                                fetchProfessors(e.target.value);\r\n                            }}\r\n                        >\r\n                            <option value=\"\">Select Department</option>\r\n                            {departments.map((dept) => (\r\n                                <option key={dept.dept_id} value={dept.dept_id}>\r\n                                    {dept.dept_name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        <select\r\n                            value={selectedProfessor}\r\n                            onChange={(e) => setSelectedProfessor(e.target.value)}\r\n                        >\r\n                            <option value=\"\">Select Professor</option>\r\n                            {professors.map((prof) => (\r\n                                <option key={prof.user_id} value={prof.user_id}>\r\n                                    {prof.user_name} - {prof.user_email}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        <button onClick={handleAssignHOD}>Assign HOD</button>\r\n                        <button onClick={handleDeleteHOD} className=\"delete-hod-button\">\r\n                            Delete HOD\r\n                        </button>\r\n                    </div>\r\n\r\n                    {/* Create Department Section */}\r\n                    <div className=\"section\">\r\n                        <h3>Create New Department</h3>\r\n                        <select\r\n                            value={selectedFaculty}\r\n                            onChange={(e) => setSelectedFaculty(e.target.value)}\r\n                            required\r\n                        >\r\n                            <option value=\"\">Select Faculty</option>\r\n                            {faculties.map((faculty) => (\r\n                                <option key={faculty.faculty_id} value={faculty.faculty_id}>\r\n                                    {faculty.f_name}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Department ID\"\r\n                            value={newDeptId}\r\n                            onChange={(e) => setNewDeptId(e.target.value)}\r\n                        />\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Department Name\"\r\n                            value={newDeptName}\r\n                            onChange={(e) => setNewDeptName(e.target.value)}\r\n                        />\r\n                        <h4>Assign New HOD</h4>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"HOD Name\"\r\n                            value={newHodName}\r\n                            onChange={(e) => setNewHodName(e.target.value)}\r\n                        />\r\n                        <input\r\n                            type=\"email\"\r\n                            placeholder=\"HOD Email\"\r\n                            value={newHodEmail}\r\n                            onChange={(e) => setNewHodEmail(e.target.value)}\r\n                        />\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"HOD Password\"\r\n                            value={newHodPassword}\r\n                            onChange={(e) => setNewHodPassword(e.target.value)}\r\n                        />\r\n                        <button onClick={handleCreateDepartment}>\r\n                            Create Department & Assign HOD\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SuperAdminDashboard;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/C,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACkB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACkC,QAAQ,EAAEC,WAAW,CAAC,GAAGnC,QAAQ,CAACoC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;EAEhFpC,SAAS,CAAC,MAAM;IACZqC,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACA,MAAMC,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMG,GAAG,GAAG,MAAMtC,KAAK,CAACuC,GAAG,CAAC,uCAAuC,EAAE;QACjEC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAChD,CAAC,CAAC;MACF1B,cAAc,CAAC2B,GAAG,CAACI,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD;EACJ,CAAC;EAED,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACA,MAAMR,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMG,GAAG,GAAG,MAAMtC,KAAK,CAACuC,GAAG,CAAC,qCAAqC,EAAE;QAC/DC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAChD,CAAC,CAAC;MACFR,YAAY,CAACS,GAAG,CAACI,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;;EAED;EACAE,cAAc,CAAC,CAAC;EAEhB,MAAMC,eAAe,GAAG,MAAOC,MAAM,IAAK;IACtC,IAAI,CAACA,MAAM,EAAE;IACb,IAAI;MACA,MAAMV,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMG,GAAG,GAAG,MAAMtC,KAAK,CAACuC,GAAG,CAAC,wCAAwCQ,MAAM,EAAE,EAAE;QAC1EP,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAChD,CAAC,CAAC;MACFxB,aAAa,CAACyB,GAAG,CAACI,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD;EACJ,CAAC;EAED,MAAMK,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAClC,kBAAkB,IAAI,CAACE,iBAAiB,EAAE;MAC3CiC,KAAK,CAAC,qDAAqD,CAAC;MAC5D;IACJ;IACA,IAAI;MACA,MAAMZ,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMnC,KAAK,CAACkD,GAAG,CACX,iDAAiD,EACjD;QACIC,OAAO,EAAErC,kBAAkB;QAC3BsC,OAAO,EAAEpC;MACb,CAAC,EACD;QACIwB,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAChD,CACJ,CAAC;MACDY,KAAK,CAAC,8BAA8B,CAAC;MACrChC,oBAAoB,CAAC,EAAE,CAAC;MACxB6B,eAAe,CAAChC,kBAAkB,CAAC;IACvC,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CM,KAAK,CAAC,yBAAyB,CAAC;IACpC;EACJ,CAAC;EAED,MAAMI,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACvC,IACI,CAACnC,WAAW,IACZ,CAACE,SAAS,IACV,CAACU,eAAe,IAChB,CAACR,UAAU,IACX,CAACE,WAAW,IACZ,CAACE,cAAc,EACjB;MACEuB,KAAK,CAAC,uEAAuE,CAAC;MAC9E;IACJ;IACA,IAAI;MACA,MAAMZ,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMnC,KAAK,CAACsD,IAAI,CACZ,wDAAwD,EACxD;QACIH,OAAO,EAAE/B,SAAS;QAClBmC,SAAS,EAAErC,WAAW;QACtBsC,UAAU,EAAE1B,eAAe;QAC3B2B,QAAQ,EAAEnC,UAAU;QACpBoC,SAAS,EAAElC,WAAW;QACtBmC,YAAY,EAAEjC;MAClB,CAAC,EACD;QACIc,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAChD,CACJ,CAAC;MACDY,KAAK,CAAC,qDAAqD,CAAC;MAC5D9B,cAAc,CAAC,EAAE,CAAC;MAClBE,YAAY,CAAC,EAAE,CAAC;MAChBU,kBAAkB,CAAC,EAAE,CAAC;MACtBR,aAAa,CAAC,EAAE,CAAC;MACjBE,cAAc,CAAC,EAAE,CAAC;MAClBE,iBAAiB,CAAC,EAAE,CAAC;MACrBS,gBAAgB,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDM,KAAK,CAAC,gCAAgC,CAAC;IAC3C;EACJ,CAAC;EAED,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAC9C,kBAAkB,EAAE;MACrBmC,KAAK,CAAC,kDAAkD,CAAC;MACzD;IACJ;IACA,IAAI;MACA,MAAMZ,KAAK,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMnC,KAAK,CAAC6D,MAAM,CAAC,mDAAmD/C,kBAAkB,EAAE,EAAE;QACxF0B,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAChD,CAAC,CAAC;MACFY,KAAK,CAAC,6BAA6B,CAAC;MACpCH,eAAe,CAAChC,kBAAkB,CAAC;IACvC,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CM,KAAK,CAAC,yBAAyB,CAAC;IACpC;EACJ,CAAC;EAED,oBACI7C,OAAA,CAAAE,SAAA;IAAAwD,QAAA,gBAEI1D,OAAA;MAAA0D,QAAA,EAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEV9D,OAAA;MAAK+D,SAAS,EAAC,uBAAuB;MAAAL,QAAA,gBAElC1D,OAAA;QAAK+D,SAAS,EAAC,YAAY;QAAAL,QAAA,gBACvB1D,OAAA;UAAQ+D,SAAS,EAAC,aAAa;UAACC,OAAO,EAAEA,CAAA,KAAM3D,QAAQ,CAAC,CAAC,CAAC,CAAE;UAAAqD,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC5E9D,OAAA;UAAI+D,SAAS,EAAC,iBAAiB;UAAAL,QAAA,EAAC;QAA2B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D,CAAC,eAGN9D,OAAA;QAAK+D,SAAS,EAAC,SAAS;QAAAL,QAAA,gBACpB1D,OAAA,CAACH,YAAY;UAACoE,IAAI,EAAE,EAAG;UAACF,SAAS,EAAC;QAAW;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAChD9D,OAAA;UAAG+D,SAAS,EAAC,WAAW;UAAAL,QAAA,EAAE9B;QAAQ;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvC9D,OAAA;UAAK+D,SAAS,EAAC,cAAc;UAAAL,QAAA,gBACzB1D,OAAA;YAAQ+D,SAAS,EAAC,aAAa;YAACC,OAAO,EAAEA,CAAA,KAAM3D,QAAQ,CAAC,YAAY,CAAE;YAAAqD,QAAA,EAAC;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACzF9D,OAAA;YAAQ+D,SAAS,EAAC,aAAa;YAACC,OAAO,EAAEA,CAAA,KAAM3D,QAAQ,CAAC,eAAe,CAAE;YAAAqD,QAAA,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC/F9D,OAAA;YAAQ+D,SAAS,EAAC,aAAa;YAACC,OAAO,EAAEA,CAAA,KAAM3D,QAAQ,CAAC,mBAAmB,CAAE;YAAAqD,QAAA,EAAC;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACvG9D,OAAA;YAAQ+D,SAAS,EAAC,aAAa;YAACC,OAAO,EAAEA,CAAA,KAAM3D,QAAQ,CAAC,WAAW,CAAE;YAAAqD,QAAA,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAGN9D,OAAA;QAAK+D,SAAS,EAAC,cAAc;QAAAL,QAAA,gBACzB1D,OAAA;UAAA0D,QAAA,EAAI;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAG9B9D,OAAA;UAAK+D,SAAS,EAAC,SAAS;UAAAL,QAAA,gBACpB1D,OAAA;YAAA0D,QAAA,EAAI;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACnB9D,OAAA;YACIkE,QAAQ,EAAGC,CAAC,IAAK;cACbxD,qBAAqB,CAACwD,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;cACrC3B,eAAe,CAACyB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;YACnC,CAAE;YAAAX,QAAA,gBAEF1D,OAAA;cAAQqE,KAAK,EAAC,EAAE;cAAAX,QAAA,EAAC;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC1CxD,WAAW,CAACgE,GAAG,CAAEC,IAAI,iBAClBvE,OAAA;cAA2BqE,KAAK,EAAEE,IAAI,CAACxB,OAAQ;cAAAW,QAAA,EAC1Ca,IAAI,CAACpB;YAAS,GADNoB,IAAI,CAACxB,OAAO;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjB,CACX,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACT9D,OAAA;YACIqE,KAAK,EAAEzD,iBAAkB;YACzBsD,QAAQ,EAAGC,CAAC,IAAKtD,oBAAoB,CAACsD,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YAAAX,QAAA,gBAEtD1D,OAAA;cAAQqE,KAAK,EAAC,EAAE;cAAAX,QAAA,EAAC;YAAgB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACzCtD,UAAU,CAAC8D,GAAG,CAAEE,IAAI,iBACjBxE,OAAA;cAA2BqE,KAAK,EAAEG,IAAI,CAACxB,OAAQ;cAAAU,QAAA,GAC1Cc,IAAI,CAACC,SAAS,EAAC,KAAG,EAACD,IAAI,CAACE,UAAU;YAAA,GAD1BF,IAAI,CAACxB,OAAO;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjB,CACX,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACT9D,OAAA;YAAQgE,OAAO,EAAEpB,eAAgB;YAAAc,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACrD9D,OAAA;YAAQgE,OAAO,EAAER,eAAgB;YAACO,SAAS,EAAC,mBAAmB;YAAAL,QAAA,EAAC;UAEhE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC,eAGN9D,OAAA;UAAK+D,SAAS,EAAC,SAAS;UAAAL,QAAA,gBACpB1D,OAAA;YAAA0D,QAAA,EAAI;UAAqB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC9B9D,OAAA;YACIqE,KAAK,EAAE3C,eAAgB;YACvBwC,QAAQ,EAAGC,CAAC,IAAKxC,kBAAkB,CAACwC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;YACpDM,QAAQ;YAAAjB,QAAA,gBAER1D,OAAA;cAAQqE,KAAK,EAAC,EAAE;cAAAX,QAAA,EAAC;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACvCtC,SAAS,CAAC8C,GAAG,CAAEM,OAAO,iBACnB5E,OAAA;cAAiCqE,KAAK,EAAEO,OAAO,CAACxB,UAAW;cAAAM,QAAA,EACtDkB,OAAO,CAACC;YAAM,GADND,OAAO,CAACxB,UAAU;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEvB,CACX,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACT9D,OAAA;YACI8E,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,eAAe;YAC3BV,KAAK,EAAErD,SAAU;YACjBkD,QAAQ,EAAGC,CAAC,IAAKlD,YAAY,CAACkD,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CAAC,eACF9D,OAAA;YACI8E,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,iBAAiB;YAC7BV,KAAK,EAAEvD,WAAY;YACnBoD,QAAQ,EAAGC,CAAC,IAAKpD,cAAc,CAACoD,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC,eACF9D,OAAA;YAAA0D,QAAA,EAAI;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvB9D,OAAA;YACI8E,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,UAAU;YACtBV,KAAK,EAAEnD,UAAW;YAClBgD,QAAQ,EAAGC,CAAC,IAAKhD,aAAa,CAACgD,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClD,CAAC,eACF9D,OAAA;YACI8E,IAAI,EAAC,OAAO;YACZC,WAAW,EAAC,WAAW;YACvBV,KAAK,EAAEjD,WAAY;YACnB8C,QAAQ,EAAGC,CAAC,IAAK9C,cAAc,CAAC8C,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC,eACF9D,OAAA;YACI8E,IAAI,EAAC,UAAU;YACfC,WAAW,EAAC,cAAc;YAC1BV,KAAK,EAAE/C,cAAe;YACtB4C,QAAQ,EAAGC,CAAC,IAAK5C,iBAAiB,CAAC4C,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtD,CAAC,eACF9D,OAAA;YAAQgE,OAAO,EAAEf,sBAAuB;YAAAS,QAAA,EAAC;UAEzC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAAC1D,EAAA,CAhbID,mBAAmB;EAAA,QACJL,WAAW;AAAA;AAAAkF,EAAA,GAD1B7E,mBAAmB;AAkbzB,eAAeA,mBAAmB;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}